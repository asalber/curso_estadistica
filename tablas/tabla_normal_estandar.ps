%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: tabla_normal_estandar.dvi
%%CreationDate: Tue Jan 12 15:32:57 2016
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMCSC10 CMSSI10 CMBX12 CMMIB10 CMSY10 CMMI12 CMR12
%%+ CMR10 CMMI10 CMBX10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips tabla_normal_estandar.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.01.12:1532
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DC30CEAE54AFF59AF286F4322383FD51E3A930F7D96A3F7CB3F4F4FCF7C
76DE549241B90429545A75C369FE5FFC97F9296C681BB34DFC049FBCE727DE80
9558C5ED205EA6FAB64431261733A76CB1E0650828DD2307EB3C44EC877FCB31
2B030E422825AE97E638E539D1E22D2D463045FED58C430846E137E6CA0BD3C9
6637ADD616FE8344129B33AC9E735081FA6EDB08674679A39EC0A7F739BC533C
F7684AFE77CE8A5DC70938056E27E016861F0371C24C75A75348EEE15DFFDA25
03C44772003487DAAB5D9723AF2E0879C58516AC14F250F1A329FAB54F531BC0
8D389275D701D5A0B2E94E7984D00F03986016A74784D4C5CCDF5BDEC3427B53
C25B1BDE14ACA25ED80DC9C6175EF0A6F4686548EC650147C6C269FE10B1D1D1
FD16155510EA7F6410E1511C924FA76B3CACD313BA33D7645CEDEFB9E2B4D16A
0550D061EDBC6329854460A9934BCAC76B5E9D25F7C24968B44D1B489A515D76
7D44083E38BD7E8696D363ACEC5C7B9EA884BFC8C13F36F2A0B60F82ED1C7F60
8CCF232FC7B3B56D63F7D3ECA60C0878B250E28059F269B6B1980E9175073092
C7AB9D34C66DFF94A30B87D8EE7D52C7709B81A2598C9422463D8B1D450DC7E7
1CA5DE4E24DC06DEF1ED9F0A5C602752ED6D9958807993AB1C4191E6A583E4AC
ED15502C9F238548A869DFE590A22DEAB3490805B678FCE0E17688A5BD0D79AF
87D099C0BAAAE1647E03E89E38C8C3F95FEF7BAE1893BBC62672C95C58449C16
445AA95F4DD09C2FD956EB21B67532E97C45B8D0586FACDA34A05B99F91DF97E
007247E39DCD45AFAF9476DBCACFB2CF29D6636FBD7526173EABCA1644E74824
B872D03FDFB8FEA60D5D46F43F36A0CF8514A9A0E9411988BA3DBD99230170F4
9CECEE87F7D39B2B76AD7859FAF95451251659F5A7AD131E746D6794B5EAEB79
03CA1713BB9FD38194A79AB762B30D45780679A38A137982F6FA82444E5EE173
35B76611E6FC573334D07FEEE059CBF7443B2DE33C9CD7BBED490F1AE83F1C85
86752BC90435BF262A8FE68032B72C34ED320DCCB658333483A2C30F1EE45827
F17CD0F19CA1B0626E4D56CE7AE7690FB5EA4EC0714745B86715E2BF7BADF840
5DA7FD2735C37392697AF95F3F44889EA72A9B1F9DD6B3B2319E7FFA9B13F6E7
591A31D1399891DEDF5015FA19A652295F921E0CCE1C66F5489890F8415F0D0A
F0CE9A19C7923C948AB8FBC1126DF53A0A776BA0490898DA7DCA8F8DACF03C33
76CA544F13C89504530F81664F07FFE886214DF47B13C236847FB6C0D6B05C8C
570A8FC02252EE59D317385C2456EE186398E5EAE82D8551FD3F93BA28E7F067
23F1FCFDB10A66D3325901B9DF693187904725CFA4873E52FC3FFFAB991FD90C
96B1E5B3DDB92C3F49247DFCF5FB138400165775AC0B627131B95E5DEEB83403
092489A7A0FD2DA00CCFA0EDDF6A0122789BF66501B14680A3B9650D6DDE7CC9
D8394F8FD589D20B5D27E480E276C6EC7D7F104C8891612605ED32F136F8837D
1CFA83953E0F937D1E4CC7DB3E226045C8A3E76D78E5E031624043170B197CF4
D60EA6BB57A6AE3E00085D24ED6C4682EC64AFDC4A9828B04B090643FEAAB5CD
CC83BEF6255A0B292723E9740CEBBBBE4A72103663FE29397D8AD908E4B2EE1E
29A43806C04DB5DCA0F56AB93E3A62F9476452EADF75C77F1B4078C0B0B09675
FE9EC168A52224B2A954DB76FFBE2AB51344990FFB38A6DBEC4F5A219C5847C0
D82F0E866312D963E012DF0DD89994AFBF7713E3898334BD99CFBE66C4FDBDD9
B9180621FB44E49D23BF85ABB2031EC08E44F09A3B24E4E4CE0E5620330912C3
096974CD5B1B05957074DA4CE5952B3FA546C81C680DDA1973B115AA85779C96
2E6F123748ADD641A983CA3BCD930955DFBE0DA8B9619E72CEFDCB75A5375320
E9EFB4A67A70A0A0967703105ADBB89B89322146289CF3DD0F870D526FBD7597
7C7F73BBF1045055F162A009CBF703FD54101BB80A110C2FF97D117A3D578BA2
61CE4E68C0F77F30F59EB17A208E63D9A9F8C81F1A4ECF1D881CD77FFAF275CF
B0CF6A05C0467D1430C53F2889ED97298432B5A73B5154BB4C2C720ADBC23EE2
024F93F343C6CCA44E92400B6DBBBB88DAF930B97062AC89A5E23BB17ADC8593
B6754D51FBD5CD958AC9612B37E2792B04B2F2B9CE0A9F218D6998DC60F58E1C
C11183A3C769172BA993B97734D27AFAA023B97C367CEF276C725B73F6E22FF6
7428F5D92F0D318ABB61FCBEE8E8B0B00C0CD02DE655BCDFAF6D1B30C9499E1D
9BDAD32E10DA7F6F6984D988C68A2F65C6E8D8541274CDC40D332113F6260841
C85483A47C5E99A7BD7243045EF3BC63F882A9D2C6DA409998114BF92E9A4D87
96FB9DBBA8CDF19AC987C4EF6591D09F5D7A2B86EE1F5B5FF3B7B7D94EF5DB99
65DDE13C7F0CF7EE179BBD3BA15C58FC473338457C149A25CE9F8E3F4F73415A
620F8F1D9563FE9CCE9254093C4BA6941CBD4259C58851C3B015F871AC62A6F0
B3867EDE0A050EF258A7F49F5081F1FE098B1A0CE811E0CA2E52A0EBB9F4998D
40FD7B001C606DB7383E97F32358CE522B711037CC8FFC175CFBED4854CCA4F9
7038266A4F21190000CEA2845E755D24260EF27A5C409A3F6AE1F1D3BE143CEC
0C46F4BEF902ED2B999CB46D339DDD22319BC0732326C35A3B1D3CD15E1346BB
E8940C2F9BE4BDDA2E4322C0528517241F4A466D3936DBF7D6E0C043CD6D918C
8C6732094251926CF3F0DC1CE20D4262847EB62ABE8AF75C23A680F1F4FFFF09
3DD4F978024FB2968A4727E02882B40584F68B6894B08FDBB5212B3BF054EC7A
E555243627F8C9D7F9F6934B3D8E7C4719D0C3B184E474341E464C6B20242E8C
D67888F92E655BA87F5EB2D255BF7787BFAFFD9A066C4CEAE0ED581BC5A9037A
4D18193CC939FA059F2DBA1E550229CA4207801D856F258ED7DA3A468C08BD4D
9F36D55387B06F8999B637DF7A8A8995F4E9748A69C48752728776D147BEF35C
9FAFF844A09FF9FC628B02F4E78D827F695734D5B678F8C803D4535BA6657220
1EC3C3DDB96E202B498E7A10BC294031B43AC492C287D0B332CA9642B86C2395
E659C7CF927759E8DF8799BA97EE941674778921302406E05A485DF4A17C726E
A23D8FCE13938677073C3776ACFA95CED943D21366A3EC6DDD0F41774D8D52A1
0182F14163CAD7928D4F3414E6ED48F5D6BDFE8DC63212B60F7207571B02273F
BDAE99769DC62F07E91B5B8EEACEAAA85318E2CDE9D31709C95A4E3A648217D9
ED601E93CB478FD17B5A9D35CE860FA4623C4D9080695FFB15171588B8244269
2E002376BFD6F73C881D1F1F93A4A2904013DE60E9DE1B2F63AD64CBEBBE2FC9
E877F0CD9A4E7B036438428B247E4014DCAF2281FDCDA96E97DB4B6138C61F60
835F9BA34D45FDB5C910F3FB2269F9562D021B182BA279981981A58D5F8F4BE8
72F4D90217AD5759CFA240EEF01D36A740BB3788BAC3C18A0EBD9BB16AEE1EF0
0CFEF60FBA7643A3A786D7358D2DB0281913858A3C50B548E4F6EEFE4934165A
0A3960739EAACE03B7EEF43DF0828D6897D9710F46878D3CA7E4FF1BFB0830CE
9191DE0177C0E9D16F1D64311075DF080A0249593D11C9026EE9EEA1CBCD4A6E
954FEF1ECEC8261E0F367B4EB84507BF2410E51C638B9F3E8AA5B27738F6FD6E
1B540E80B4C48948F4C0F2520608FB0CEF80B0E55ECE77D6C303F5A1910E31AF
E04DA90B2CD75F86E7C4AB192CB78BE18262B1951D02F8A117CCAACAFC3CF191
59AAB906D1AB8ECD7F96BEB997AB44965340EF85826C4E18C2378DBE85338521
879833D40DB44B70F3BFC000D315477C5D95A8F6879E2135374CC0FDB5B1CD59
3960DCC7A8B3C99D406332845F98018216CEF60C29E0434F160FECDAFC0B0F50
A94369C2A20853373B720D92EE0B50D6FFF64E4F998EC788B516F37A6969396A
F12F9EB116605CFF610D9B08252554EF78BBE8A70BAA3CC4DF6E4C9B9FBD940B
0CED50FEEDE8926A741512157A893434232E4BB029E726787F4BA79FB9D6FAB4
8D45398489021083C67DAF7942285070BBC6B351A8EF83182892CEDF3C1A999E
24D38A620464A714CD0C288E7986C2CFBA03C6E74F66FD8C0B68E14B19CAFC65
FDBC14D48440005E7D9590D948652B2653F39509BF1001081171F983C3D35A9B
9968D7B72D74AA5F9880740AC02675B99A56EC1D554A4EA3569A0B7A07323310
F3805467EBD62ADD2E7018B46C2FCF039FCB18030FF96B70C54D899B492E6498
AB5DFBA69EAEB38D2BEC79F4FAE9EE192780CEA9651A4A2D5AF05EA204B609EB
F430A8300C88776F905E6156D1A21A8BEA3576637019F488D29D3E249D059816
0BA3E57DB6B59D996416A0FDBD6E81E19DAA6596E69747730431BF8DB7D8E99F
44B8CCA9761BDCEDACA1F90C4D10E02E28029DF608496D0DC40DD334720B1FC1
422BDE6ACF17C9F05C6646AD8E1D286CD0C9EF9B3C8B3CB8B7E680E35F8B8D66
9F6823FFAE449EC699DA9A5E71266C36EE66F273B1C528B393EDE96E34F02183
82A43EAB242D48D8A6892643F78B7CD66969681F1E5066E6CEEBF84C75E3B099
297ECBF54A8E6E72FDE9CB18A8A2A98A5720208CA0F09FD3E318F7409D77C062
F6D6A3FD65DA49DCAA1C62FEE0F1D73C13537F9B5CC83608122B0553A135CBEF
CFC98784B4DC8135E2FFB05CDD575CC715D77012080A778122FB2C460982AB59
BFDAC026EDF0928C3EBE8CF88EA9EA6E267FA370396EF5B6131EB73F63F26B4C
8C239563B2BE31B28A188E4819A1F76C9B6DD93C12E45DE519D3F8E25E1C57DA
71416166A5A6BA94972D5B0E6A9ABCA4BB23730903D4A1003851B4660B622F34
2B9BE89763D0159ABDBEDE54E2235C8CD43EDB58AC4DF54E7CD61344EEC9BD17
F5A0BA7E92D90B77C4386A57F16E4CAB9F2AD907D47A8878D3B942A857676C81
EB061DF10E382FAEDBB8E256D926EF5FE2E70BB08EBE42586B452AFF11328F28
E0471248A11959CEB8447A770DD83BCE2262CAAEBF6CB7DB922B24F7327F9709
BEE72E4914D204B49B11CF51B2ACBC5A887DA375546A3FAC1EC8FABCE30D2B8A
2F0395EE189D86DCF00991B0B20E19F28F65B17EF13C8C2EA5FBDE36716306A1
1996E10DB8594234525F50DD4F3068154AC51BF2D81092D5ECD0A72682F53F81
CE77103A8394E83A5C42261003594E7FEAB3512B25161882FFFEECE9FE52E5C4
0005C01AB91898FF88310C6A6722A098CF148E08B970FB029073F1D76FB4A5FC
7C68B6B22C7DC06523DD492C659523EE58E44E511145D903FE8843C6FA7D19CA
E74BBCD225165D67C2EAE37C87097A4EE8E263B1C9EF6A61B076D99A2160718F
C3F52E7CD27B542CB2161FADF5609FC05329F828D221AFF22FF533DE5DC55F89
DE28E4744A6ECB12C41357BC6EE55E55EBF49DAC8DDF42DDFBC3198CED741A90
2E2D8C97051CA928F98CB05B03CE7A9403256A009E5EC3A37D48A4BBE5E1AB18
6B3CCA52A06A25935767ABFAFE98A5893470FD181E303C460090C3BCBAAB4C85
F0CA52B4DC91FE25DD9A6182E62951183FFD3C445AEDE86EBC30AF7C8FA6C3FD
A7F6A447BC28A02BECAB7FEA5A7D0E8525BEA24178CD5331624B0AC29CF9FE05
EC1BF07ED57CDFEB16BD9BD0CCB33D5B1D478DB91104898EE9003FD9FF6C1343
C66D6F7EB4E120F0C6CFD070
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /lessequal put
dup 24 /similar put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1491
307A6D9A2F2BA5099C8A07762E70BDAA74BA5E2BAB260C1352107EB8A96523D9
4BA3082B99772D585329AB8645C3BBD11D72BA01F95CCF11C6DEBFDAAF7F5C4D
795F99DAE6A8D59462D759001BBEBB59AB0C322EFE02904D82B424649C2FA593
0E23281DECC5AA908E54244566055D418602EEDBE78843300158908F77C0AC75
9562065826D34C38C598D8626BFED7CB672F132E065E2C27932F709935988376
94901EBAEAEC410E2B36575A71EBB8954C3A90EEC264E6115950FC91D0D54999
323D8B4FF8129A8EEC3900A00CCB026E6943BE1728BCD3F6C1BFD503D55A6A7A
6376AF4D646B2F31B1AF935446DCC68233C72AC164BB393DA250B0B423D32887
C680509C862B6F49EAEC995036CF797BC11DD87159241A7503B1FC87023766D2
E1CA46A71DA0AC42BB476284C2C805A354FF8AA05FC95E628ABF1159B244A809
57D687C76277F092BFA29E272689AE88506DFB61AE099022E4F94ACDF200D395
AE3BFABAFE773F095B71352A3F9576D7683CD8575ACA1AC674972A7DC9A61C59
B909A30EB02CAF8C2C9B2AD3658FFF587D312DA84E937BA495DB030ABFAA771C
D1727E062B60B88B7590C97CA51DFB6B9FA1E70DAAD7EA05DD6C35ED1BE7679C
B7F62E70E97055E79810E827452E693143B53D919F32C3A8535F61D1FB81BFD2
9B6D9288B13BF8FD8B09D0059ABE6E59FB522E71B4CCA244B7DD8B4EF2B065DD
7073EC58212F082BF04B48602BA5E9C2A7E861E8D6783A20C2A7AC5530F273F7
1E74639A4EF094CBEA229D6C8721CC709C54BB702F298355C459BB7557ACE183
214FD557C4172038C34C81D43A3FCC56E00ED5FD923EB1BE145F20BDFD157D99
63E962F73193351C010A40AD80F62B051FF8D8279B614EF097D0AB4447366725
FD95AA63130D06A05FF6544B2569E1CA4E71C3DA02159EC4239C0C3B898503ED
1C406E89ABFC7F8E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 70 /F put
dup 80 /P put
dup 90 /Z put
dup 102 /f put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9122E8494CE3AC668
3B5554571BE12596F1E4AC4A664CDCEB7842581CA963B239C132D1566EA3C8D8
813C2E0080E8E9EB00286A6BFAFA2F12135B45494C341DC852F6843CBC07729F
46913460864CA1D6404388327DE34866006879A6432D15CA03793EACCB3DD901
7978378A8EEE1A3651FB083792900EBE4A4273337B1A0579BB34953D14F23C7A
E92907047F03F04D504850B925C76EF54671B58CAD3DFB6CE84446545E575CBE
ACA3094D2AF883626D34CBF12169BDCD936DB5A01271C06B08138521A20D4C30
78C2D564F606B469873961F2B1727AC58FDE2985C7726E246D8D5AF051626927
FBE67BFBCC20CB297696FF076CB2CDAF8D31C8C79BA6AF5D244FD6548393FC31
838452CD5DF192ABE81B8B87459FB29497641A89C1ADB4B55345D01FFC3638DD
1B378110BB57A7CEB968DDB6E2F01C8EF322CC5043B16E5507F26FD45F407208
BF00433DC9E71ACDF4B0AC20202F95D622144EB55301F228B0FA874A5D3B65E4
72C879694CB1FE7E160C7A351D10FD65CF4D9ADA49C3DA31AAB2575F5B1903AB
539DC229F96B9C987A17285E96730D1C38EACA6BDE1DC57628FE5E6F05E75DA3
A78F34E39AA7F1DE3BC84C8E80543339F96084A66D2FA14EF6E83C0B3DD480BF
E7D696173FDFDBC3613F579738E59A3561A48E227A762CC4744EB376812790CC
AA33E3DC2EA98F97DB98A61F3189929CA1D40B095A2A47D4A2093675589FF3CC
6A86E3F7463E144E96B353E4DACD2D3C2610D3458FB14E9FA56A696C3A937DF6
272A45EF31EDB255E952D263E043B04061DD9E9D53825DCA4458085C5ED8A88A
BAC7709D5CF6BF0FE58C60C9E2071E8F3654BB1ACA385A031490A261BA8C8930
0E613B7BE64BD6154A516DF864808EA9174969358E47AA4CC64078652FBB8644
536DDEF1C07F3730523E3571736BB19BB64FFEACB1E21BA82AD8E6DC223D5E0E
65B72FFF1DE15540121B6948740534F3AD561C22720C0CB36FE4DD04C7885F3A
351881B8343B0CC06CE183CDA692E5577A99E757CDFE92F020AA8F84DD53DD85
2744853A6FE2410B920AF1A73D5F0464FFE353A691103CC8AE4A5F76D2B41451
BF14746FDBA9DE30A653C4E584B04C5EEFE5AA3D5F4CD66A27F7B128389CB57E
884DA8F10D6F874A2A763E18945733060077C921A8340439F1F86D839986C211
4679F8912644FE488F3C32434D2785EF230A4AAD7ECDD3AA6FD6A4CD93C0334D
2DB982136BBB0C5BE1B0C9DA5241FB9C632583E2F0ECB29406D73E24E5E04C6E
B3769F6C835598243238C2774510CB7CE02E461C16137D2371B0E270F9EE9558
FD849721D1F49DE27328935573B69FF2339321A0A9CA6CE2BAE9227DCAC0142A
A59E67A8FB49D75E4BE09117B7BD2CCA6C8D313C2A526E425C6A009B795BE074
E54CC42EAAC7EE7C3351827F72A6147241E47F062CDBA60CEFA1FCD53169EA64
929A82013CD2DA1628B582102056B85F55EFCA4313EF4A75A6E246E4A1AF088E
75FC212867DAEE705B298B1EB368412DDD111A408F7C8A58D6BCCE0D8B4B2F6C
821F160D0223CCCD3E0CA111ECA969AAFB78C33A8EEC4B7D592632C5FF79EB73
21853FA1BAF9A110318317944B2561C16068D8BD6B3E15F5EE7E8DFC50256720
3DA1023D2262E4BAD18434673B5B7D7F804F65CD380E7843032AEDF7907F1247
7B26AEFE2B3456531A60A2B440FC5CCA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 68 /D put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD10B4729E5749A10EDBE644886443D1249
2C8517DF8D8AE98E2882439FA81903941B363A7D885F93C6DF9E1FD89F2F8CEE
B870C409ED13E78B4C914813B0A01DF8F876EDCC4F384055FD37C575726AD69F
F23D50EC5BEE2FB95A44F2B2E2DD94C933D90BED2C97B53738B4B2ED56EBE617
BEF17B9DF4F314A37F10FDE34C570D7BE76A496A58242F51E7321380CB042424
855F4B53071DF5A0DA5A31B8AAF9FB4F4C491625FF8FD008BD4402918043BEDF
77B840B2BE0DAAB4EF904FFEF935954AFB9BD2041241B1BC8519EB642C89E288
479664226DBB6F1171F9EEBC7E1273D0CABCF6B1BF7F26AF21C21D9B1B916F4F
603DDB68D3614B86566FC91D67AC3F4A4A96E256FA1A3BD35F4465AE4EC64D82
34BEB4BBDDCEEBD9A89D932E55F14CA2776F927C4FD3E0920790A57DAEA08C5B
169A3E2309DA6BA8684A5D1DEE81415796E13DCF906FCDADB092047831B16841
B250CD148557D72DD7E683BF122B38E2C4F614E59B395D1D9823D7D5F126D932
14B50A37FCA7120F8F3A8E42134F1B6B0C248D56F247AA68FB941839F600F61C
14247EFF780BBA3E5198D37CED44DEEB724B0AF63F7CAE541F6D0929A26F94B4
70854622B3743ACA2E94BFD25A4D7BD9FE7580E9094A930EC978E64AA9725A01
5C1E8C504BDD0FCB48B94AFDF44233DEBC5D6A1CE77D45129A5F665DC0516F55
9CF0359955E433247B041E055F354CC31DB36E775FC8649ECB0937AF774CD6E6
2DF9D7F1EAA6C9EB48FA39D0B1B9645A3C1F26C66534A88DD2DD5C6B30605E94
3F892597CB6172D53D05774529B50ADA66B10A8B41A3B8E7C714B6B4E693A1D1
58EDE6F6B54FCF287F791041F07884FA437A30B9AA6CD04A3F86BE99475CDD2E
A06ACC76A99D5E8EF4CDA569118ED72F0D07C7D3D3F4BB99B79925A59681AA0E
E14048E9A2929A2353A3D489A190D1E853985218F1497F7DDAC8CCAA00895935
FDE6848296DC385C52BA4904A4882D8CCB51217C4D92F92F0863167264EFAD03
821B9E59631C5811D0CC79A2FCE313FC746500419A4303676804F555B58A6AE8
A273DA87CED8A9520D667FE2EA6ECDB7BFAEE46118DD5947CC52A880CEC3BBE9
4372604955FC12A6233AE2E7F0010A49BACCD5C04E8C06D99FCF0F8CD1D44BAE
1D0D3F394F8C1354ED186F9043749E2C5E3DAEC9A51DA7D4EAEB84E976434743
110E938391589B431E90D429C74261B58543ED71E4F59B68E5D98DA72DCF30D0
867793268BDFFBBF0F6F006DDF4CE43930119F0C0430B1E988BA8976BDF7B4F1
98BEBBBC2D482FA00B8735958614425C593B34E44BD888E30C42D4BBB3F8F799
2FA1B1E42243029A234F13A4522F459900711809ED85D8B6502C2D4180CB2747
48358A86D49F4C14AC5096BC97BBF995895E8A414283FC7AE67D07BFD4AD7D7C
4574F0F051571132B2F6123FCCBD73E709B7DF13E462ED77BA4069E14EF0E31D
8D407BF78624E191DBC2C225A3D3AF1E9CA8D6F03661719C67527EB25CCD9328
283C9F0A17189723DBC6BA6CE88B5BC2A63B18E115B756E125867FC077FA1539
8CF620966AE73D22C7312708911CCBAF6785043FC6C757576EA0E4C8F0F14614
231A275836A45912493829A9EF5B253DDAEBC5CE6923ADB7239732CFB0D90876
614B5124089BB90C6DE8FE799CFF1D39C768562B4ED040B050721300E3A2A43B
7CC317DEE621415D8D35C6D0A1B3322114B056BD56EDF5FA0655D351DFCA7FAF
F1EA78D0D6FD12743F6BC29762999FCE93D5063F7D87E6F759A29F32ADBF5D37
B697E6886D2348A62293E5275CCC13243DF7B68E47AC5055D3578C34519695EA
D030B18D2B1B928D2CB8CAF6B39E18932E563C8827CC340AC4350DD2FF1A3EA9
F8F423C399AAD5D324BCC6F79069690BDE2D5DCAB19AF1ED9F97BBB4163F5A43
A0861A9033ED76B763A8DB62B98BD48BA694011E44673A17D6C5E3203CE27B1D
95078E8CF3615342A3944DE09291239E7CFFD239B90F9D164012CCCF43AF3052
E8F0CCCFF7E5F6EDF0E6406D8AEA0F849A14C1E60613260F4B0CEDFF433B2467
59EC16209E835B2B9426B401F3A783BF474B9EA4A64A3D73EAD865210E9D397F
E1A21B75C30063E5CF5C47F95807A42287A2DBD42A7C3F67DDA456E1B85458CB
F0DDB3DA821FD33EE749DE357E02A4483BC8446F5E8F38C3A65A16FA152620B3
F3C8F586487194107C63BF5C6AF68FC04C371C2F559119273494A85018A22C3F
FE633082B4FC549FAAC5B5C34ECBE9A053D6FECAD859B0687CFD677CA7AF2ADE
12D5C4CEA1A3A26BE9423815F5FA2C09BA5E0D649B275A49782F144DD9F59D27
D9C5F87C2956842B7E131EA2EA4584C974FF0AF3E4D393CB6714EDB704A1F0B0
E0E7B8BE3106F7205C7DB1572E08FB6E25889B91534CC115F3911495DC5E665E
DC01AB5AC79A5DBE5087EB9122DEA85705E86AA51B384C6898154A718A0253A1
A629BE9D741D18400747E8736A5C39A6E22F1B5117C49C6AC5B8EBC8C2711410
BFFF1BFD938020D6F8F873E7A0C607F80A4C94CCBAF1AD71E8CCC69A46FE995C
8F9F1731E9CAEE95B701FF1292283909D93A174EF8B94FDC7CF969F21F384F90
F1B47DB4A7197B1154972A44BADCC6472F88281117EDC211226EB3AF9BAD1F05
6CEC4952227A4ED3148AA8F2010F195C209DBE01CD328B332F06CB1DE98AA4C6
0583906515E2776183FDB6FB5F3E4266B7D327312EFB770916FBAF26A2044B1C
0EE6096E008AD67226A9ABBB491C4138CE227BAA974371748BD7282E76DC7CF4
A376DA51717EAD9F40E47A513758125599564D119BD32E1AC797B31B0006D964
6EEBE9805A8508F2456ECF4D02E64FC064DE2A73519094BFB3356F66B6CBDFE9
D437F55F17C33AB41E835231B95F984C311625373FF73925D862525CA5E69641
9DDA471655020C16B8DBA09D43CC3D8EF78F27314624B28CCF28953286A517B3
4F61512C317E9210A89F4D21846747F55153715473FA5E181828A4C12A71DAE2
B809DA692386F263A75C1F6ED625B99CC9C3E03F1336C90FBDA05C7AD5348F07
AFB57C79F4A7829760C5F771BCCF1AA7DA42549516E6C4E63F5FA4B962D217A5
2A09061F5788CAB47943843B2D9C08A32719E6B582B400494BF23BDBD7038164
E79E8841E7080BFEE466A1D97C63750404EC5765B20265461DAE6E57B5C958A5
4B43ED6AA765099983A1AB5E0FD14B7DFB4AE346574ACBE4333E0446D8F9A223
09F3094A2950EE0299930BFB1D34B257F66A2B2CC910A787A5AA51B79CAFDCD5
01C1A5CC0B61FA651B04D370958048F037C56CE456982557433461E8C852573C
64C126F9777B50968EF60F8479ECE2C1DBC6F6D51CA0C414A046E5B019A52C7E
75D3519A70532BAF50560966EEC3E13B4F01ECA609D49924E18E8E36DD5EEFDA
D748E35BA0392315ED76FFD70142E86EC2265134BAFF2BF705AEBD8C046D3E8F
0B8C9F7961392FB22C4F8680188E87C83C6B9564B73012B130536BDA62104B4C
26E2CB137EE22C43D038BC2E52E9CA0FF565A0BADF717AD3D206BC5147AA6332
02D1391D3AF0861323F6AEDD0DD902FCEF079B0C712F7D2C8DF98D4830A9D8C8
B70A8C5D5CC601115C0A2DEF5563A9EBECF58AF04EF1E31344E2D5AF6B8285E4
B468D36317402AB9B2A5D930CD311F25903323CB59496E9762CBBB999350A337
E455DCBFAF3337F405C6D1E3EF22012701B04AFC47F27A09E3FFD57EC135DC15
5076FF0B1487223A0C3F6C89F50D9D476F3C8E20124CAA63157EA77B61B2145F
A584EBE4B05C2AC23422D42CA492CF7CE41CEDA05081F391B321D5273147C47E
5C60A2D5C5D3B5746051A0E8E1B790F216CEE5A53F0A0DDF870270B55A3E18BB
CE69512BB8A848BBD98925A3F1770CE27E3A3C093CCFB6220B7106BCB5B91209
91346E29939675C31C738176A088525E5EF7F970FB7CBD1CF490B9752CE2E62A
5EC3A9E97649C3915B4B12165B2577CF544AFA4286E47D8C9FCF288241A12B9D
B37CAE87D0E53963712A6EAD0F2142C27C8DFB6F0165DB02EDB50F4F5F773660
09C84B54C387F8CFCAFF5CDA8572AEC3A87276DE170E91CFE136A79688A95D3B
86810CF7F833DD96EE4C1D3492263F49E58CA30EA49B9F3923439CB4CB233D59
02F165E04168F9916223FD720F85EDAF1C02151A11F4437876DA653DCC579D3C
DF86FC1BB235B2AD416A553E3B12F73A6867890991BB3548093A6609088D1D13
FF9AEBB34B1D2826DABF82180E7E145AED85C7F8FE8CF1868AC1AE0115143101
72A3C9199DDEAE6952FF6ED39F17047FAB444F80583CFD6EFEB9ABBE34548BA1
2DF23A3A91EFBF48E7CB2AA04B83BF610A7371AD62091E8D877E10ACA877C1DE
24985581A94EA970D57AEE7F73E89DA7E2EDA23639C95F99B7D5C87BBD5471BE
F22ED69D708C4F95C0BD7CBBF0BF03BE50FBAEA5715CC5F952FC962F17B6391E
4545AD1511EF234475182B2ED880884066F120031391CE840645C3782415BE6A
15AFFD27F1AD6178B412D1207510901B1B7FF20F0C13FC1A9E6FBC59B10A04F4
0B082E64F9A30F778B11910538D6DB1DBDC04C6843D23CFE626B8496735F631A
BF44C009C94823E3E0C0CCE2C8A5B6DC3D7B32EE0DE5718DDB8E3A277CBEA89C
2EED8665090FA2F69663146F13DCD994247B50DE367790AF4D539958AC793655
A2E61EFE26F301C4A0F7EE867F151E87B05AD32C662A0B74D99E15B61C52094C
BA456EE3C04BBB760C670CDB43D8E6F8CD7892F168E0AE4CC8C56332E3057280
6CA0D2D66A282CF7D40FE7CBD57D8AAD965554FA9BE733CD1188E82F61CBAADE
EB49BB90221ED7ECA04F6C0F3968BDBBD317624B76F586D52B6610D1DFF98E6D
60C8F87F2F0031159DC8B2D95177DA5FCA1CAAD688A8976AF89ACCEE933084E5
F3C488F12834B1B18990E5925B5D6F570B8A81A1AD8C3E849253327AFB00C84A
07230A60BABE2E824EB3A4D0091C25735B7AD7986471ADEC34729AD1DA34B585
F0A50E7DF0436C6A7E3B2551EB3107C825886130AE30C00C424BF9D1328DB47A
624C029616F542F3F39AAD34F26F68B4B1F96697F5660C12B426CF08740BEAEA
B9B081EF11CC46A539DA79F759B8D17862735EA32C5AEDF791D979AAA6E688CD
1F806864E8FFB5A25042412FAA11616DBC8705FB29753ECEB01AA0671F54E9C8
B323052BEFF0E1C8F294F89B8CF83511F029B0F30EFBC07764F4CE8303B01B7B
441367AC17D7A4ACBD0867B8E82C5497CA1CCEE74684E0E6EBA9E589EA48892A
C3E64178AF48268E63DDEB9F2CD9452CF89B0D2731545B169A950550A85E8CC2
45668AFAB7D1B8D48141E9F616887567722C9FC26641FA14021DF9BA1A1C9C43
228E624C34ED456886DBA93B27F908D30E5DF1D27A9FD6CF293D0ECD0E3D62EE
11D422B36A82F08639062C002872BCFDCF45C6ABD655175DB652146E138E39E3
9EA3976D8C1591C45B04C320CBA2884E5C5EFD35B397345B08C405A0D3B3274C
44A02C18D054345DF144731D64CA67EF08FE59A5D56A7C2FFFCDC3C37718C349
F3426B7E449E613022DA60C952A06BCB446C0830D382AB3DEC927DF78FF3BC04
0F895BD35FDF85A07A123972A935D6FC51F410E9AE09C6E995DAABAC2806AA70
3ABF094DA6685421F5E89878C310328B9835B5C5F95AF432110EBE7648399D1D
C5EE56B07A538F0FD4DA8497C6608868445BE35E1AFD4B20FF23B7EA2CEB420A
2585116CF33039F661FA1E1573F3CF951E624C36108E807D1082957301BD9910
E0C7EC3EE5061E8DC6A6EB7D7EA1205C78C5192B8C96BC1179305C09A54617CA
C039CAF02D3242BFB34B84359227ACFF933AA534911F4B6508FD2FDEA4CF675D
FEAED17285AEC80ECA81C37698E9302B68990B15B1203C7759ADD698802A11AB
4CD27226737667D2DA10301244BA8EF06CB1C687D80CE082CC5099019D0C7EAB
22953A8A072923D2C90845921AA07C3CFA0C1D613BE455B192FC5470E3943C37
27366B7B7FDCDD841AA92B6D247AFE0AD6BD4A0FE3595C5D7E2FE5E09F6043B3
0E4C231DFD91B25D976393DB5862FEDE341E96648BCDEA453F7DF9AE165B12C0
BAFC1DFFB9398CC2DB470CB3B337EB294C5899C19207DA6AD573F1881ECD51C7
807D160FE71FD1F2012049B52CAB178CFA13F98F73AA1F15B77DF8FCE5238BDF
9201460E6A11DA9A3BFCB4A8B2DF465DF94D85D1874A35408FC765D3EA63E5EE
0C1905F0F2C2B04A8DA7E746FC9670CA760F1AAF073AF56C1EF77699EBF34204
9FA0F0E505E04889765BB46B7B932755B3FE4CE23EA82BE0EE98754A3B6FC1D6
5D1F198EBAC10FBC303998F5FDD8C9BA0136C532998C751D73B703153406165D
B808888327755BFB275FD9BDDC12473D585EDF75B101DE39E7E85BC76290B381
093DCB0263B517E85482E6336A71F5A4DCD194C71173DC055892D5BFDC37A921
D19D1C02428AF081FD50A8107875C86D0AAE81769E4ABEDEE10D5E5AB1783ED4
EB6E1D1063FC791A4AFCCCDC9A37903ED03ADA69A278A4D765BFBBE8800F9561
391E5898534F210C0F780B47974F2B1EDD30B5430647646AA944BDAB8DFFDD65
D09BC7C17727CE929A3DF501AB33627ACEB2CA4A59FCBB3EA29823623CB80113
CD5D2C1387C6E9D1DFC54C62EB81DA17D601551AEEA8B01C73BA389E9AF1621D
281B089FC23D1DD83DCED5B0D1668C16D9DA3A8C9AD17843160D56BD0213055A
40244ACD3BE2B46F9897D0CA78F72A6FA65A0BDB17890D6C1FD0468AE52C3BEA
9F53D12343F0793C7E63B537B75FD9E4C97642547C0502980EE673B0D4BE7C64
85A4BC000D7B1351919FED44347B5816E3E085CE2B7996B54153686ECB0A6BFD
8B66159177C8559EE009BEDBC668174ADE22186594D4984D5849CF668205A816
9F71FDA8B2866555CEE2A7D0480E798790456A0BC32494AE58B73066DD49E91F
B9B7B76C82E78DF3475F3187AABF9D842793F3F23EC7DB81062D8F5593F7F977
C486CA95A4A2EBD718248AA3FA53B8E30C0D0BCD50693348F0010DC7B392B928
A0F76AED92DCDBE7CE769D27FE47C2590BE65D35988771E6054F680098CEC073
A548F3E8A30D3652547DEA25958F4063F361C4AA0749A14DAAE7E2182D2D099F
585249D6F27FCA8CD625E584E8BEFA992E186156812089AA6610F586E878A8DC
83A9E40908989641DA2E7768430BC630B0B51F61DB88BD5D938F5953B7DF484C
E3753327D229A69FC49920CA29BC87987DFA2EEA9B7EE86FD9A9456DBC2926DE
4C7301C0DABFA5950F651C2A0803E0A93DB68569389FA488CA9B8C9204C9CCD0
6693BDA0D9821A5AD3DBA75866E28A983FE6F1968D8B4C6B81DC9BB7501B0FA1
839F4707D4722E3C8E34BB162BF59BA98548E515F4911B7C36287F95AA4CE4D9
579434CE71C679D075C1BBF56FB7C0E5B53AE499BDF4E115A7F030D7FAB6F0BC
D6ADC7F8A8D8FB62089A1908A02F3AE7C4ADD622E4C080B74374AE74FF788492
40F29538E818129E976529E8C238DA03258BA7FD1C21DBB610AD485B06BC3484
F3E1B644ACE90667CAA973BF2C1E84CDEE1D821BB9E8F0A01D09C55B378E463D
66F48DE03E9BB6AFC04008A39DC0FDE5F19406616AEEAE068DE4C994FC365C58
DB3C5B416587282382FB1854E231DDF224661E8C1A0D1020AF86E033C9F6CF73
B460B186AF0C8AA92FF85DDFACE7FAE264904F703EF6B1B749B21E77BA5F0AC7
4EE54F92B0A965BEA31B1E6720708BCC767BD73AFCD44FA2CF8C55DB8C865C75
77FCF4731FCA99587471300F4E37670E772902402D8B4605088D31E8C5AEECCA
A3E566F800DE8E17E8B07FEC62C528BFA0D51A31A99E4D7EBB25E863321F0875
9BF8715BE8733341A355BF84E0C457AE891A7A195D5B6CA89F84D5F22ABE8274
D9BD031060DBB6B8CB4FAEAF0AB3949D7E021088906B84C3E67ECB6571F555C9
EE139938F6DA12951E4B0ED6D04F0E7DBBC05C17C5CF37670BBA8FA1D31A718E
7E3C49354D6BEB373FC9BC1535962B2F074B3D3BE38D9FB45EC2F059B066B286
0B64903ADFB3F9D5AB43B5B1E75F9C0333CE73B457CBFF3146DEB3BF155223FF
C4E65097719904AADB3CD8D7F8BB3F23FD6383FAE952643D8D537AFE16E9B018
D08FC2116E80512CE15744C65B91379DDB47560F46DAD7C32FFA003FA4E131BE
F197E5C59CDB10349CB8E9DE860A5133EB86C68CED875281B2CAE61CB5DDF906
C4D3F7FBAAC84DAFD5A84AE71B68A6D8B984AD4942A828B967D685FEC1784375
7B30765E197306C24C29C02852C9A55491A5DE658E6885B24834A91B698CC771
7198F9AB403AE51774CF2E7E0D30090C4AB40B353AE48B6ABB21A9949C707043
ECFA2C9ED9ED591F98E5FB1581BFB12E97B35BAB44504370459FD28CA0C151DE
D5634089598C3D2072
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 48 /zero put
dup 49 /one put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD75292BC9219DD7A33B9E7611905DBCF29C14D54609AE663D76AFCB4FECF
198AA5C28D09C2F003B2030360069250C11B5FF96AA2BAA83B24A399BFDA711E
73F6CF45F3F09A0C8BA9AD9B1F458686C1141FAA18119CD50F6317CEAA4E7069
CBBCD785E3D915AA3E0FDD797DE1710C30A985762E26B8F46B5D984D1C5C0D92
F94D06B9A6040458E6B2430E362B41C439D37F2A64747AC744AE0BE417F71D38
0FAE740866557E536A5C011AE1AA7FF0227E732AEC31CA514C210461A17DF138
F3106944EE8B1895ADA1116B1B2DB859971FC89D0BB32BA1C68C87E9C7936DEF
2FEE6CECAD11AEDE9FD055082525D96DEF66325D498A43B0D4163148379CFE66
25705CC31C2C3C300A4C0DE948269AD06D26C253891A91C77ED6FCFB237B3B67
5A4B54EE0E0F1E560E36AC9B8149807780B75C9DD97F93C49FADF399BC957BBD
603650658EBACBEE998B913CE3AB3C725CBE90DF7B2C6AC5816BBA175F6936E4
D5BAE611D045C8071265E0DB5CA09953AAC7D72A67B3368E74D6A9BFAA6C04A9
26AAA533B8B730525A0113BA8E0CAD21D23849CA8F5184545186024EDAB7FFB6
C588C43AF7A4FEC41D5A2BACBB93574137EC46D46CB85478E466F63E70C40C1E
0B2B776B93406CC1691F42933127ECC1AC1E5AFBC942C4B827CD4F9D6D60195E
415C1155F3503ABCB7F3103FF7210E06368392A075A45A3725742DD2120C3BF5
04C4889FFB72FADDB1EF32C39BD184399273BD35EB94CA12FDB90BA289435242
0B07AA932916E9FC515CB5EC7476A71624153E770469FE3B385658203F9364A3
31268C22BE31D5E76588B231FA5F01315AB4627D1C9F83C09F3800DA6088692D
605F23B2D781ABA4BB1B079AF6103E5CFD60464251CB1E3944CBA822A349C7F3
3087ADF678A30D7901573C1868AB1FA66816253B693FF7B36EFA4ED58D769AF7
9C84B26E96473F1BF6B3F32AFA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 78 /N put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FA85650543E7B6F3B
ED9574B1B91D4536789D4DD1140B312DBFB70ECFC7C9922DADE357FB3693737F
A97C6D404BFC0BA53CDEBD1BA3597BEAFE42535A8C6114CB40D7E5A208F3D77C
DA24C7144292EAAC6F8D22260D77081EB84F06F755810F387A382E0FAC7394F9
E463CE0780CAD4432B90DC21FB55DE99A45346B827C4643E75D625633E5F99C8
22898511E7BCE8939941DFE1FAE459A12F6B06B822392301A8D95ED5F0C6636C
C8A965B432DD2A59BBC78968C35BF26C08502FE9CD24EF513A4C09DC6C2C8011
B86207A6BAD3134F9E638BD133B75FB7D0F1744FA6BDDA68607B62C89603BA7C
695B8E1C68FF691820F9FE613D08FE506BFCFF5F90C0C250A29DAD75257BAE99
7C97D85E1B8B1C4D7DAF59558A4EBE4F626144AC4A12BA5362F7BE192994B549
368A252071BD324996D1ADA7EBDA18180D52A930FA2E10E832F54991FDCC9094
BB62EB81ED3CE113B32811257080BBDE524A363E29DE91E4B2805F61BE711D2F
648116A9C33AEE9C595DB3CF5A94D26BF97CDBE46A0543494CF742C7D2754D17
1975537ED49781C3A4C6AC77C2676A510D578D1D8CC3FEDB8A14D5905E3DAA75
16B818EA2F44E38E41612AD8CD1583CBD2854D798C072ABA3A14161A513A9E72
A62E18EC6101676E81
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMIB10
%!PS-AdobeFont-1.0: CMMIB10 003.002
%%Title: CMMIB10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMIB10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMIB10 known{/CMMIB10 findfont dup/UniqueID known{dup
/UniqueID get 5087392 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMIB10 def
/FontBBox {-15 -250 1216 750 }readonly def
/PaintType 0 def
/FontInfo 8 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMIB10.) readonly def
/FullName (CMMIB10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /Z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943569C4269F4A3F32986A7D15
50483BA7C04CAE03D8C22F6F9A1827004DE75B70455207585BCDA37DB2ECD162
363518DA08026AD9B621422303A6D262158CFFCC48946A47FE42911F1A43CF10
7CE85E61151664036FCF591A1CFF0E7AAF263909A6A4A50DF0CDB60C91A75327
8C011FC63A462B0598140B4357EAEA08DC2C5445E1F8C2C913B721D5A1B67941
77BB66689F330A22D1DE5D86B2C4712DE9EEB66EF95D1E68BE947672CBEA966B
3E26531084152B1412F48697A965C85B0338CAD1EE054DD4445A9726A72E959A
B5B74F0E0A5A8F630116FB8342254BC455EC3667E184A9954E0B76EF54015BDF
F3DB7D1FAF44EEEF38E5F07E9589B85ADCB9B529CE9C889CB4C43D1C7F5C676C
DFE91F37CD6CD338DF774DBBAB9A1493C7384ECD4B588506F23A024487CE4903
0B8C9D1483536BF7CBC05E9326211B9211F11FC8B2B098A0C5F89F19106978D5
84C9134F45A542D914AE56D73299B3FDC93C2E8F4D271B54F7EC0FB05C1DA397
E9A2036EA69C903EB95485765BB05BBD2E021ADD7B5D83555E490EAA81157819
A2AE883E39B4254EAA5C4FF60087C4875CDB9E4A85A54955EEF5DD5B15F8C970
8E22FDBBE98CCD8E49C27F55616F3588E6699202AE58B0D9A3E398A350D90CA8
D3BF920E504EFAF93B5CCBB336B072F2B3EFEA907599A95774F4870B6656257A
29ED37ABFBFDAA41ED08161F473C20CADE82D6F7531110CE680EB172A2024F8D
6F02DDD49350CB0BCC97C657BEC9A7A92A7C1E623E8B0E409A74B01DD0A470DC
94ED4CA0B6BD786EE287B753ACB1C10BD826A84D8FF92424FF1A2418A6EF9BF8
0B3D0F708E2F52E4557F497E749CA9F2E513F33D6D489612C68B68CDBBB4CE24
E53AC2AB756F64B838CD2B0D9402620B0903B8A357D8020DA8B4DEF15AA06A1D
D4D78057167B901643CFC357D7283A850C139E1BBF6E4079F375EAF63C7C4F7B
F630FB23A70A90178560B1A2C7F64A2B8796D60826F3B10BEFF755CB59DC26AB
FE5E0630FA1E16D083C8A5ADE0345F783D771AFE185F3DB251C33AD86127C0CC
548400D92F559737FD421E6D1A807AF696A22C1779AB236BDD37F7BC467570BD
4C1981D141680DC78513430DE03DCA87134EE46E90471F4DDFB4D5AF445433D9
FF6F9700904F274A610E5978C0C14110C00C0D49891AB4BC8690BC93418E9EF6
DF7A3BA8AF0BD66C17DA2694FF55528771B28262917CFFE822E973DA4B55AFC4
AE9F6C28994E25F88612E804C918278040097C028E15C6B7FB53332908842185
10217D7AF376DC438FE712CDE9C50040E0B79F4BD67DEA70C6C2FD34FDA699EB
0F6047A613FC8485CFAEC294FAA0214F0639603A00F19A5D92A3BE89E5FEFFDF
CBE800B960AFAC6EF1B85F4B74D8830266D0FDF78081F6DF0F596C90E1954C09
631D98F44A8F0C2394AEDF98EF8BB4D21AA7905B3703D76FC4E104389E61377F
92CA0B2A9CABDAF99CD194E473FA0104ABA283C76C20F003C604199E6D4D2A5F
C72FC32D84A1F4EAEE4E20660BA4C14C244AB65F000B6D896054B2B52F19F708
CB80929D9F98AEDC99365FABB6FC42D9337653ED45D2A2B802017BDFB8D28F62
745B5D74F4411CFDA724189030854D6D578DCADFB37B73AE15E80EE20EFBBFD7
959AEA06EE4A93DCE0D30B894D811EA3033FE26358EDEB614DA60CA8F9DE9855
F26F1B7FE1EC8DF0E6983ADDE63E3DC55C1088EA3091C21FBEA4C39E59BBF3C2
7C4EE5AE85C89FAECDBE6BED7B789D390EF78674F41A8104BC970E81FA9CCB45
DF6B8C2C2DBE4DACD0FD66877529BADA909675A761460C3F6B6F122ABF3C4F3C
C2B74804989359C5C127B69CE1D89AF4A74BE3B8499014942319D03AA740596D
863F0ECEFB11825FACEACB3E6971762E5BD8CB9D0055C620F4E276C3339B31C1
C321D785E1FD9D7AE53725AAEF68C258D2AB7F8DA4F9B95DD5CE20C35F3E9908
964C6CEC56D0AB5B34FE2AFE412455C971881B144FD7D979BB6C8B721A6499EE
D39109FDC63E5DDE7CAF6559CEDD080A1624690BB6565FB0828D5025D153145A
E8885E5D37301BC1ECF95161DD88ED99FCD11B77BBAD6BF1E1D1BB265817AD2F
40B223CD712D48CFD86428661D191D0DE40CEE65272A90AE80C134307D575808
57CCE5A72EE709196847F25EC20775359490CD96F818E135A4770A5D477FACE1
18C3E44F1C1F60D1B6BA8B206F107DF7FB7167870392CCB34357F9E4499A4164
0FD3EE38365F9F16642FA5D4BBCCD53E9680174838110C2F341E8856923D67FB
17F77E3C9EEA8B51509ADDFD595784714495BB36BF6331697025D64718C37131
782349E44FFFF0CC73A9A01D0F41D89A433D01D82267B25B15774CD010594C91
A5FE2AB68455420213D78D44D0D29DCBB7C27381182947FBA133FA137B8B7A78
9A1514A411497C4EAE49ABF00971280276284E642036ACE628F142181CAEC3E2
2FA3B8B74109C3317B8A0DCF444A2D7CD40B56A6A0FB571F29020C10467F8E5D
56DFF57F4B067C7115CE624EC693759F6C93F10C4BF79C1083D72390CF06110B
6A909581DCF8D72361238801670A67DBF1A2C831DBED6740191FB43F325AEEA2
7CBFF48305A64AD9FF4EAE3A6F71596DB0E5A1F5B6BA2B6869F4F65156E823C6
4FA7BEA68663C5A539F7609EFFB902DA29DB1AEC8D477051840A9AA16FC5389A
121D76409D28E23E7908DBBD8FF823B62036C9526C3B10375A9385A4AF991B59
88BF2D51C62FABFF359AAF056DB79D13260016F6217B32DFED2938DF6A313D9A
F4852580D0C5357C413D5E06C883D19CC2E6968A5902DC3E4CA25FF06C6F76A6
9E15D2395CAE81EA10644263244B15EAA5A40C6E3D66C0B6AC3AF60FE4C1F473
6D4C2A110EDC509210E58B4A5E5B8408170535D1321825986A1B998D105991AF
CBD6A46610E58EB90C9ECDF50BC0D26C7A681F6670ECCBE1B091808E4016D871
E3E4123FB6B1927307950B814B19D665E8CE2D5E5A77BF59108B2D9E183A1BEF
7D229985E5D326571C07E94A68EC0C495E8DA0DF16C11F6DA761BDF810195971
3EA07F0BAD9E1118239673FAFECDB14C685427B9FBF3D309C726D9AF11FBE3F8
9BBA94E8331845E2CD62549F90EDA5482053354CFFED5185ECBEB1305057F699
3FF0F6B568B180A1690C5734054B8903D637F31F3255526DCB44C8549B7E7AE8
65EDDA8AC5A34FF63EC3DEE34A9EA6F7FEF817CEFA9D7B22B603ABCEC4A45A17
4A5FE48105B99857693DF7C56F148FD13F085EB821CBD3F3DDB49138B1875A98
6D6E48B2C2C124EC0BC9164989AAB1F5AE8C0F21E63193C70038DE654D67F565
431FC9CE4B58D283A2DAA40287616409DBB7F7E94DCCACDF68CD8ECB19B98BA7
BD00C1499731B7959DF35899DEF7F684CAA993990B6239B66BB2220919C36185
A3BB431DCD9197A67852D137C00BF45AF3698C115A41CEBA5D3F1E2FF32717A1
69307623AEAF8287EFB7A7019B181C30F2CF4584351E8176E17A42BB48C5F521
B4538474B2724B5DB5CEA51E783E870AA97FC47401CA0FC0DFC4998613F2946B
B827C2F7E874267DD7BE63ECC00AB0E2448E7951EEC5DB4095F9915085A97AB3
812A376AC0101429983921C76C8E686A52A669E8BABBE21354C4A74A6EBD99E9
E2DCCE027FF45D75DFA6547FA60F2A63243D5A3AE3A808C75A99F3D42839A080
557C7DE6628F353F57B704B809F249DF208245612B47221653F42ADF0AA26CF8
57000DD580F6BEFC12E654AB4C4317490832055B92EE69CC2CF85A0232986CC3
819877F3DBAE3AACB1F431C216077B528B1D863CCD0BC6860C97009B90F33779
4DD77D702A114565F58A1DF4B7FDDCA0157CB0A7E74A116033212D83C1C2699D
65BBB42025622243B1A25E399014D0C0582DC50561373C8631D79148CAC3DB86
DAA8CF5E39387115637865FCC04676592C3365F2130852EDA3FD572A353F4B02
497576CE8B5E7BC90A46E02E20536AD5DC1F3EA2B832253D1D1A819B0BDAFE91
893067A21AABFF14BF0485EFF09F6256A58772FF91877896F54582EA274F32DD
CB96295DBA8BA6FAD260A71766FBAA4865CACCB938D96A7F35884B2F80DE838A
532F64A69274B1E648E6B18333465A3B89E8EC4ECED5855F6188825DC2D232AA
88283656765F0F957E152D46620E0001C4B0713F7D9AC4E887B649593353DFEE
334A3C8A3DF606AD48E286A7962ED8F7B0F382373CF35DBAFBAAD8B1B4B564FB
D421EC6183B7051E3F3022E09818EA7DA564EE44E054C995F112E33DF2A7C38E
B5BB24A172F51B5FEA5D11A81957A075AF1CC2D7C9041F85E46709ABE201426C
244C07EEA7550E78D3866493E451937C404152E4B9E081F52653EF379AFC7F85
D00FDB5360563EABFF210F4D46574091A6FBADE205D15BC7A0EAC7C25BCF58CE
479497AFAD121023BF24D9737C42F4566B3CE3E0DDE592E02A4088354A4D5799
02EB0EBA57C13A27BBA913EB949A144FC4F913E3A06FDF1C7C88AB50BD994F8E
08A5837496483EE06EDABEF4381339B1007CDB8D888A2770536EB20DFFC71327
B768DE076F35D951034F4E09E18359837D2D5B80339885FC6FB6E6CE88BC0C7F
465D36783E58902AF41670D0E01656E2983B45459BA7D7822DCA1D505E36F554
4625A1684579A20F7B9491B949E2FE69F32A016E62A979EB9C4A05944001CC9F
CAC4B8E45CF45726B6BF10811DB74CCABA5EA5E5F2AAAD3D24B2CBCA416F2BF5
C86B6495C5C820757C4743F1464B300F47EC054EA29215AD2F2F17F55AB92016
9919577ADF4BACE5695986055FC4730E531FE82E9D926B1B03A8C204F6FB4A39
1C94C310E6D5F2F53D41BBDF76848CC247C89D4CCE56EE40FADFF0FBB48804C0
1823A8A70992C265A469576F47CA341810FFC1B8B58ABE8EB762567DA328B25B
A9D4F3472428AE0FC180543D29B8E4376D7EC48D25A411991924FFC2DF520BF6
90A7B08513D2A6B42F2AA51B0E3E5F2F6FD57E63BD1736482F303A13D6E0EAED
1761211598B1F2AB26DDD5D45ED477172287BDA7062E8AF61D232473EC060F68
31A225E0AF2E6A5BE2D8604384359C53F880B0A503B5DF5C98D2D657D1466390
6736B42A24D1DBE55ACAEF4C5058DE5ACCE069D39746488D6AA244BEFE1F32D1
BF65D0EC3FADF515EE45E672AAC72040A1E1065DB5A52FC889E1650487BC4C79
77D55ACD9D726C74B6249277B0DF721ADB3293098639658F6796F7A012416C14
7C694BA55C734A527ABA0C9E6363C2C00633058B69261961658CDC29A477784C
90517818017B6BF89580BC66BF15757490F131D9470A323287091DF45DF490B1
9328CCAE434A9637E0E7D3A63A418989384C98463294D25CB07883B8637AC816
57A0AB17C4BB9891599D2B8398DC08A13B73A2DCBB9A79218C161AEF14D238A0
8D00C90ABDCC18B11AF05A54621B19294D09A4B533A7F1D4F0BF2E637BF5E723
53AAC5785828293988797F37B8F14C7CD165E8587E48A876C96D701F46438349
0DDF52FB12DE623F786F13D9BCF2D5BFBBB9D5A16E3FBBB5E6A9C34494FA3F6D
B81C12FF86521554113D1AED9A894E5BE1E7225A9B98D4980AE902A8DB3DF1AB
5D48B334C4476EE4FAE42C2CFFFD1BCFD99D82AB3992D3CE1F8642FCF7BBEE3D
5840F516EE8F6E87B5294DC8BF2DF4A0B7A380CF7A2BECF45CE0B0F8A996A463
E6193879C8E25724BF182AEF116B7FFE8BF1A1C7FB6FEDCA86965D325538AE1F
2863A49700469ECD3BEC3D75AC255984373E4A5A621AFE445A10B8D97EF1BCBB
61263A4A2009650770801C386AC6F95F02870DEC62FD6C556A084FD4C165AB0C
A52DF2633B01DCAC757F614FFBE09CE217092414A7C0FDC43FB02DD311A70063
2E594A67C9F8D8CD037020C074BFE24168E810C8804EB53F16CB67ABD8C9F99F
80D65C981C4221E857378C4EA79E5CF88CD53B841C2CEB7C58581AD1C3EE79FF
6B07BD35895A8843393EA65FD48BD248DE0E7799845B1B568189EE76445A58E1
42ADE3CC51747B8B97E031CD51E90C75880B6EB5D7729BC29EC0AFA8690955C4
AA5E809DE62E0AC18C5F1A6FE5E5F767B70C8DC44C965E7E2E8077938B4EA3CE
F119F7F824DAB88946A3BD00FEE7D8CF68B5A35614F864473C24A95F13C7BDC2
00F018B5BD313629E0BF5A5E35D0A34000BA338653FEB7040C3D5A43DEFC7FB2
5999A596BB7A701E8E03E8D3D35FDE11BC8421E8283EBC327F7C9F6D457E573D
073755A97EC24BCC4C33D93D72F62790E732CE02320F8D7B385DFE2230418B1E
70AFA7DF7D83D7E04A2F657CA6C2410A63F9B45C562B7736A272349BBB18E462
A02BCF7CBCD049B2FA692445C13C4B28C1762DD4A632CD41A8196DBB26075B7E
9708EA316266289D910151A6F7FD5F4755E7A41DCC3AADEFEFA2F28D241DC4D7
0AD828E18F7541FAD3C51FF4938FFD048E1EFFA5A6E443049FCA2472FD9CD0D3
00A0AB032E36C43ACE958C75B2772BEEE4327A53F279FA49DF38E5A3BEC64EBF
7677CCD8EC1B972B65FC2643DC5064EB8A66A777124B70F2DC6FE62030EA59CF
9E328396317798C1074AF49EE9698EC5B3A0DF1112669CB2EB0E2B6948DE7DB4
B136C23C5D0B2DEB49808EDCD5A3B68E161ACCDFA41C8FEDDA50942F8D2E75EC
EC36EB127AA8656B0EFCDEE65748D32220E16F296B8D06AEF513E272CAE380EC
17A1A2B0F235FC70D479A606B33AFF70D324C6FF178A38DBFF6F2BA86115FC2B
7237BCD1325690F655B912C30BC069B20095279D01D4AFDADEA0E9FBFAC0B22E
60E377515AF3012FD9069DE25DC4FA527AB6B2EA9CA5420243D815C95E0F4D51
FD84FDC5341F20BA6BF1520C684788BA2801A7CF3B95932EDB3D8693ECE35D70
3666A19F6348D59155A89FF25E119B37D5AF6635843E4FDCBBC413F4A6031F4C
615AA55A257FDF806FD0CC1A65FC78F1427DEDFBC1FC71408978F46E3F32E8C9
96FFE6AB284538B37213D6B88AEA47E99DD73D9AD4369B428EC913CBB75FF2BE
D9D9C51701D2D0559632530D6231586A667F3A530FF2F6227EA4CDC10BAB9FE0
E313D378C933138BEFE6D0639DE34F45A5CE2049F5DB6E28A70246877C55DDF2
079FB885DDA5C02313345CE0D2373638BA9990A6911978264D314CF74DF63517
57EE8699DEECC391365AFED7C1329813024B3ADC3565E28D754217B5B1EE6BF7
AF11791FC1BEB8E6835BE35B05CCF2992ED7EB12909C9D10E89DDF362036ECA9
FFDA4DCA0A6B1485F4C4B8A9BA588C708DEE0286A83FBBC77B9E9B8DEA69E54C
D7DA907064DFD9C45D3CEA56AE7503493D5F4BE359D3F1669F0B4722B2171811
C8C58B922FB5A692314BBE92730DD235964A7CE0DA5F79507D659EF04BAAA9ED
372D08CA888C6640CDDF10C3811BF9679C6340418C89C8A56E50467C11FD1BF7
D7A58A97F117F511B5BDA0F10AA18F32C4A6A2B7AD54974DA8E693381243AC52
1BF222A8CF93A087FCA2CBF3C036E803B2A5FE026072BDEF9A6AB04B50A9AF0B
C78CB24EAD3C4C6C1043F6701FBEDC2B16C73B0220B1226E8CF1C4AE76A77D50
A4F2FB0D95866FC447A648A6E95481134C882B3CFC3CD9CD8BE6B0D25A1CEAC0
E1CA4591E98EACE52EE14B5FE74A4A729CD3E5580A9B0D0473AA2ECE3C05B9D3
F253C0B613BA7CE0AC4D16FD02C19C536AAC90E5511DFABD5837A3B800C49239
871F61F40EBB75EE3024F37818ECDA106D09D2647CCC4E6AC34F49B8FFF4238E
DC8441F3D1D4C3FF4E50AE5282E8F13AE6FC9A73CAC242F862726D530EAAF7C2
0F88943A5D20C4D45F80486CDD86B71CB3ADC32856733FE79AD708BEA82791FC
DE045F11F84BBEE307EDBF1FE20C4B574B936760B932A4EB964A3C381D2E0B6E
7619CC97C2AD1C83C2CB300C29FF6027A69F5417397DF10E34F226B4B9B205A4
02D72EA000FAD98082875EA65D80712F72FDDD5BEAD9FD2876984DED4D2B4D53
C923A5A59A0839A3DDC22F46F134B75519B41E16BE28136673C36BE629EDE2DB
3969FA28FE814E15B13BE96CBBF0A8C975F675F06C275C067D40AB317C9C9A5F
2EAE3439F771DB602A89467CA9E138856AC428B3635C910F96AE34F5A0B513F5
EB0ACA2CD2F6F7686F45736C4C812A80BDE034923ED067D117238C1FCF92CA67
15BF244B04D7692A05
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 19 /acute put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 78 /N put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB701C271B954FA8D3D35E4E0550F954B32038375B7C4595C93B9485F
C31B5C445288723EED9572CA7FC5BB8FAD9E1AD60EF8411E9DC92FF0E40D5A3A
2E5B7A0AC44F6EB4F092FF50F285325A4A9EFBFD84C5617FA8BD60BAAEE81626
238209C5177EB494376548451C03FFDDC5E1250D545A73557332FB8BAF25B917
B839AC94252668AE1A3EE897F9455CD28F62F4DD6766EF6ECA10883931886E3F
1D434F82EF938733DEBF50C1B5D3E8444EAE9789F42E3C11DC8D0AC513ECC131
9492C0528DA72B3475A6A6DED4B68E85B48317F01D04BB62669F3F483FDE91D6
032600B6AB825F4AA85043C404A20D31DE68B61CC283D8B7162B0D094C0F7ED9
9719D78C62EE7B1D9136FA77F06F386787E4173C38D2F4B061444CDACFFD4802
8185AD06FFA2F7A2ED8DB254F76C7D4733FFCB9FDCC6BD8CC5F872CCA7EC0CF8
CFDC42A4933E07A501A3903388620561A7901B928FABCE62F6C4BBE018C3B930
1DDF2C1A47ED606BE4A98C6EDA7D7DBEB5C2426B358A2CD7AD8285E3FFF3C4A8
E82CB6B0A7F399E02C2C8A52EE7E401A88F8D0DC16E29D8BEABBD03C57AA729A
436DBE0F177A8C14ED9C24DBAE2F08EC9DFF1DCFA2953D7DFA98919683AF72B9
DD27019E492928AD841A7E29E60F30591ADCA3DCEBA149D6F789EE3CF6BDCB18
3061E4A15399E81A1EC2935861C1D040A740BEC50EE44A6914F4C0B5F3D614A3
036EEF3CDEF70D335C00F34F6C86A39390575DE45EF10D541E367053C55E0A03
E930431697FA3E4D82D372AB16878F4D5DC1D916B5B63566AA65036A6E212E1F
82592F0D511F603B95E59C43CCE146D8225EAAE9EB2D671D5D83BB7920E4E6AE
DE9174E575DC1BD961802980F102E872D71492F932A6157C3FDF83BBB4EDFBA3
F5A887433BA4D62665CDBFE3F6EC6462F4704AB9AF6362EFC9061DF8A7938859
0CF096B16C34D8A60FFEF7C1489F261089FF7C9812D2FB00795085B7D565E186
B4E8885B8D852FFB8B352D85514394D1E805B5D461D76902CFEA2A6569E9F793
5049A9BA6F173E4DB149A6970A07EAEFEA20A680C3DD18FA469D8CFFB5E940C8
C6FBDC95082200446434A38AAC855AB9A274B0837113174476B1B4115029AF2F
8D93678AA239066A06CB9DF3B8BAFB9F41D258EB978ED21B1F1336B8E1600BF9
908C7403869D5959A5F46F3E94500D836FC573EC0C7A0837779BF793E253ED2E
76E9877E63CF432E108C82715623028E06B5FD9513189425C9A7E276ED1955E4
E2D4F15027BD2E499ABFBC7643C0701C2617EA39EC45D7951616158BEB245B76
FCE891B821CBFD12998AF445620ACCDBED581432CA792D11302B0ADFA3B93536
728438BCC640EBDCFE99A7A4D212D02269FEA3546AA64BD0E64BD6F81E2F7265
00E7289B988B965A036C24D128BB4A97C813C471339D5BFD1868B19F730F85DE
61F65409CF54112CB9F7E4B3E42AA136349D9292F859CA0753AE09DDD67EF915
CA3A807F151628C6A3FAF566998B379B066DCF40EBAC3147FA0FC040592BA48F
681DB8B4979B0514F598A9FEBBBD14E824DA04C2952E0887DC614D480001BEA5
0CA5254F7DFCC445011F55683E49C826615F1EC724D5DA5D3B29A050A1C0E7F2
0B7A7AE11E25DD7DF71D344538010BBFF88F316687E040B31F857BB8D46ED725
F712DF38CBC74FE6CDAFFEFC8DB4E31BA08289474A8EB547159F4DA1058BAD69
C8EAEB1C58DC398465B00E45710DB67E8B6628F376C5AEFF53845E25693E1DD6
BCBA1278E7B7CC5775BBF943A8F6770F2F548C525861F5841A3AC48EC010D2B8
07812F5E90A32E8F3B2502F76903E8583057D43ED645146446CEB689B32E0897
359B6CDE33887352D56225E5F14FFEF71A37685E007FE000AC78D4EDA0A5E466
79F7B618101083E94631B8887F3F529E349C135E964F91CE843DBB823DC3C679
D214A8D55584F870C80F7F670D1A87989F0C12416BCFD1BD9C667DFCE662C166
A60CF4DADE39178879D12E977ECF70BC7CF70E4FC423A7477EFF3FEB8DDE3B96
AE2E11BF290AE9479A0C525765716E878CC7310256B97B9FF3749B115E5C9C56
CF84AC93AD8AC58A0BFD2E28A394230A55126506EAF4E65010C0E396D96EF4E7
D5F213A6169DE7119CEDA9B898FE0547F9A041E19A98493583743205292598DC
64A00D81177377AAB40944E46FA26A1E0A806E50366D3B4461898BE30B55FA27
1BC6C16C469245FB53C81C5816EBDF3C8DFC2D250BF3A67913393F79B86CFDE2
8F30DE8BB85BE5E0E64D7B5AC0F37DEA0DE280A37A7B2C720348F886833AA253
1878D21374042093CD644827D81F35EEDD3A39666B2F2F8C628940F113166F94
A844F0F0BBC2D401C5EA6BA3EC4BA325B719EAF2020B5F60E65EE02463DEBE50
6AC64FC2856866DC350F9C6E2F269320C51DD0C6DA19C56F7266605630D00D4C
62F1885A8AB8F66C8CFE930D77A7C69D07616B68B6389B37C6881645102406C3
AB2883EE6B826FF62DA18B3F233898D64575FBD0249213524B31CC799EE3B5D0
1E32751F6CCACFDA4A96EEB347DF76720775037DE3A350DBC8D20656E7C5145B
298DB6744EBE713ACD64AFF89C69D4F665C5D672C554DEE6653A2A86073B160A
D763B7B8FFE9AD84102CA352D733779F9994AA26369803F1C54A13AFDF79557D
433A576F94EF5D1D294DC6A58C7504453D83CC7D2D9C5182ADFAAEC449492C83
D076A26B143D83D9E6CF3461144A8BC61C14DADD641A4B2F9574C1A9E9FF1C16
AB1994116531B55225DB7E7BAFF451E364E0F337E56C7B8459DAE319F8769510
C7D8D61C64ED0206370F6A41E9EA6E7FF30A873DF90E60A046ED8B3B0E866001
A8F154C75300CE493816F49F352AF06B32B6C8863E796A646A39013C335025E4
A32299C966AFD660284691F07D6DC19F9481C10095322AADD68C8115059D4994
A493E2D0F2666E45911BD1884947940458E7388C08E960103A724E7421D80288
B83106EDB76AA55AF119455568E85C29A7B72256E98454BF45D41C1003ACEB69
8F3030018A6AB460C215E445DF5748ABFC9A83BE691270C66BDFAF77A975FF1D
38A3DBB707EB74D25296287B8FEE2D65C8A2CCF1B38ADEA4FAE4B80F173C7747
BF62ECB5E25A0A4859ACB68DFD4E6CB9552B4AEFBD43CFF445BE52046B5B94F7
8C6ABC617F53CF68923E4CB18F94E02DD42C480FA3FA796B739C850D3F6B1603
BE026800DB857B566EEAB4D0B022591E99FBF8002947FCFF953566C61E0AA2A5
43A3BDBAF8DBBE4EDCC2D8CDD6222C147D9786E98C9670BEAB6E38DD0C8EA24C
9C91A3601B1B8BBC6B2AD637C70BC456DC92D8B5AC286BA8D42C17798DEBA105
33AC4FBBA487200377F5271FE385F98C26B51F64AF76BEA77B504647FD5DB445
77A4EBF06D0091F604E1125E275354B63D8213CDCCC8704807E297D097E0AF46
C2B1C1C669CB291C58BD5C88A262F77792A8DDED9DA5BE476A9C851BCD74173A
E7D55046CA2D06BB81A4E5CBCC0BE2D7CCD1A973BF297F5C1C2ECBE55FE4FA3C
74300DF82803A41F50478DBB06E631C2EFF6CC4C3C506C3826FFB272E19C50FD
47A5384DC5A530851D472815860520C6986C779D2C84EAC72E37F70B4C31E47C
42A6BF64ADA4ADDBAF7054869ECEB65941A2832926E95D4EE85EBAB8960474B1
4BA1FA6C4D7A380A6ABAD29896EAB063DBF3D44C17596704F95A05BE855FCE90
7929D55B28E12FF11CFCB7BC37F24F3C21947160B1CC987816F91E0526458FCF
4FD5070229E7EF5EEE5D3868387337479E123CBB87EC61B7BF4ECF255178796B
F8FAAFD6BB0DA7C124A64924033464E819E9F46F5CD87D35D585AB8EFC5396BE
E58D18431CACFA4C4778DD4240B4F624DBD95411AAB33AD8DF2CCF64F70B60F2
C3BF6FBF9954935E6F7449176A4A9B4DD57784B6DE7FA031503D303273748AF2
AFD9C079785F56D9F0C64B3B03F4DAA1713E4D3B2C75208A35D7695164A9DB50
377D121F0058632A98D421938F15D6D5671C131C851A285A8C90D4F43B873E4B
18F07ED8E5F2A9473ED4463A99D9892C04ADF480C8F2A9D6DC60B251B13D9C20
0EF69DF2CBEED92CEC8DF93281813A1DD59E5B0207FA4144A99AFFB9F9BC1210
A03A3074E1D7E300E7662FA9202F3FEE7F72ACBD0110DFA3F279441568A8BF0A
D62293249E5182B5667FFAF7807CFC4B942CC590E8EB0237E8FD308BD3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSSI10
%!PS-AdobeFont-1.0: CMSSI10 003.002
%%Title: CMSSI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSSI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSSI10 known{/CMSSI10 findfont dup/UniqueID known{dup
/UniqueID get 5000810 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSSI10 def
/FontBBox {-97 -250 1077 759 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSSI10.) readonly def
/FullName (CMSSI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /dotlessi put
dup 19 /acute put
dup 65 /A put
dup 68 /D put
dup 69 /E put
dup 77 /M put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2919BE7E94DF619E5D4CC604
78288A019B254A5A0A8E2D5ED465C9DB3CFEF0F444DA2A7DB2022495EA1B3FF8
BA3E769C503BAC77336BAAEFA8F7B4BCF9BD63253ABE621C7C696DDD22E0EDDE
ABDE1706338BB5F604B4F42356E2A96751B8EAF1112A1BE30B618E7F7BAA96CC
A264B5EA7138FD007E2CBE19B1F008AE13B47252D2956A06299FB28035624C39
08E9E5A4BC08DADE08861DB9940F6F0FA67E97E9A73C9F41525E865D0BF68F8B
6D48D1595EB69B3FF78F5F4B18470370BA219A010F9B5EA904289205DF20C7EC
91A2B866BA05251BD3D00FE5229CE2D2F220B6E25DA5B3C0EAC68979BB312E2C
532264814FF214CBD46C8B9C8E45878C9E28FF334C5CC7DF9D378EA5A37986DF
0450E2D5645371B8C577C28A008AB7A702E89FF337A17D05AFB0FDC55856AB3D
FFF997FF51AAD70FED81A5D307FFBE26E862070E361DDF6D162934B7852D2FC2
F3FE611F218E28CE0B964BE311E59D8729C7C0FC2B2D5781F73C87D64E6388D1
D7798FE70E74E76368174F5E055FB8CDA3809536768B0E6028826436C7E6454E
895EB7E435FF8AA342BDAD46A2C7BE5FEC83B8AD16F2C773F55F58870E70F2D4
FFCA12D89B06A706CC204383C0238C17EFD01E0118FA4CB77681CB7260BBACE8
30C8E7B16669700F884F234C36EE9694841EDD4FE5644949AA28AE2745FACFDC
CFEF1590F99B0DE494BB0851205DF4E7F2EB88CFF794DFA7958F6EC9197021DC
D4C3590B2729779345143AF6C349CBD2F17AEDDDC23AA8F0998C27170C44FE2F
163C1E2FC314C6CE27D6CB497C3A12F6D10B92D699E1578C23B5D9A907EEA297
4BF7D5C4ADFACA310E61EBE5655745FDCC48B661CC2D3EC016A87632AE410B69
C2B98B87D3F46491EE8611E31CE17843B05C05924FA42FBAD7687003C14599DB
08D72670855271EA55082BBF6AC146D452C1531338138D9AAC7E4D2F0CA1FDAD
11E4CB830A9F38A83999F6F0ED15D12FA631B8604D4E3018E625C8BABD8E1075
93F5E17CAD3CADA2210088E71C02CC6654DB4E12F8C2B6B7EADE37E52FAD3FD5
83E45B62FC9B573A6068EF3B43856CD4B6C3E096BA93728B05AEE2BB96C60AEF
58214FD24DEFA63E3FA299289B211A57E4B0CE9EB58414FB78E20151BCED3F4A
9AE6B1D7ED559B3B619385AA8496D6F56D2B353E4B1BCCFA0A50247E283B1540
4300E1119F710664ED5DECAAE9087B8C0CBA63F3FA09F217757B8448D13648BD
D16FEAB50D245C198EDF27C8628CC7BD02385EEB04AF8F4C76308BEF4D640C8D
6F2FDA7BED98F1498CEB1226F009BFAF6425265EC0D13FCACF4909B7495F4211
BA32B04A3B0BCBAC89D6A9088C47C47B4BAC36FB59D9B5D73B2E9E926A9DD183
1AE00AC58E9485379FC6DA119EEA3F6E478F22B60A464F192B2F43379407D4A8
795073B4309C27D8E945468055493D0204B4A57C39CFDC951A04E0288775FCFB
DE3993852671BE697999C9831A33CADEA75B369C179EB8A807CFEEA5CD97BC55
1B0EE49DCC4B6BF4137124123626A5C91603B01B4E0AC759526C129F6AC5BE74
B77B4E431B596E29C17BCCD1CE8279E9C00DF7557AB25770FC9B02762D7EF141
84FFB4730BB8451A485F784A34647741D9B8D2127D158283E01B38BDC39BFA8D
EAE249871ADB347827989E11FAC23F76C2389F8E883B01FFD1EA4968B44D1B1D
760A1FC8F79B50385D8327D6A6381923BE9A2FB8AB0CC6ACAAF5C7701C8F7BDC
81424F63D2CB312235AADD050FC4B71448EE02B7B25C82B6BFB070261919DC1E
32F5E6DD4C38691581D472C254BAF83D7F568016B5AFAEC895187E88AA4D05C8
FEBB3AEBC348AAB84907BC4D85C1F888ECAA5ED2714598384D7369F5FBA0B92B
ACA0B6BCD2D22F9F10B27FBF11A8AF204794CED402A3597D2D469A99CE64BF1C
9242867251B8EFEC0001A1ED0F470A4346BCD9DA22C005A079EE1DE3E33970FE
56620C318D2FD3DD9DFBB773B4FEA7FEECEA9FA1923AD4B2F49DAFEF48E1C529
DBE9EC77299E02DEA39C7B91F9E4F6D68EB224F4555F53E66CD00326CCB5FBAE
70243CDD407BE63DF7BB85E70A99F8B58BEC1562C290D8E50666E1E4EAA484DD
487C567B7BBFEED34A65A6407E3D8925E3C667AF40DB0EFBAE2C07EBE60A83DD
C1A02842861C994C4D314A87986CC94EE74DD4E29AA9E70F393CF956D3BE586B
AC618055571DE00541BA60D022DB49CB62C13FFCB3932DFBFD2D52C8F0C72F1E
9337D95767E376B80AB35264405CC5C385ED6DC9F95535E00C5252DE66961AFC
BC7C83ABFCFD5E0A055E37E7D261A19039D47EE792CA30EA673F80C48C0EEB20
DB21686ABD169A45DB94E35FF086C9946F51409E9E0836041081B04F861838C1
87157DB76A983928BB4122798551318EEB70A32C11A412FD56B7805BDA93AFCD
B11D35FE799224AE30C3BD09D971AC651D06184FCE45D898D09685009DA35EC9
CAB63751F8241297562AE2FEB577AB074D36381B0E5FC0DD5572E3A3079B166F
56C42FBE6147FBDC7EC2ECF6380A70F87D1E44CFD02A70BB3AF4BD9D350C7B21
5DDFD4FE288F0D9EB2FF4C24612FA759B41D0854C04163DC973570B974BAD7B7
BF766AD59D543E808E8F56F831472ECFEECFA7BEA74CBCCB025AB04079AE0838
75852BDC83E1D723824761459DA6A8920A27282043C38BDDB43157A70D552072
400E84CED5FDFDA0F09DF94431956F304F6E92F3DE5F99874F995B467E2038A3
B9C787E650C4A31B2FEFF078BCAC93ACA5816F5DC3FCE322C9DDB15E34856182
BA15F2D56FF4E91573BD2D8B34767974BE928F10EDB3525C2B259F320DF99B88
87801826F2B6AAB2C178270B27730496C44CC83C8036EE6D7D33D6D4C0D871A3
62B7BBC8D8A4E86AEB2CAE76CC7B091B7DF5516EEF043C7D2727FE569B2E28FF
F6BCC6FD3696A85CF5ED26571BFD346494CD6C0974BDE257EDD4A2C53C70FA89
C81F9D32F5CCBAB39A7C00A1BE116FA1254F291AD26C1DE4CBA27BC03C5E5561
8E960A7169F86C0DF884419ECAC607FA82B00CE0B41F7696B2C384582AF6A986
5A9FF800D3A1F4B6C2524F1A4300B9FCDAE2C2050B9882BE4F512FF539FA6BE4
C9577484EB323E7BFA5BDF628875A3634214B14947F7C16541CCE359F72A0E27
C0DB4CCD1653693F7D0BA68D02D5A61AB516173E794BBE4C2C3F34ED9C33BE3C
4A9E20A687498DA1DF7BCB1F6C595B90A5730A10070A54180318A1BD01844585
E78C6EA28EEACCDCB49F1CAF1D21EE97B1DF74523291FCE2ABFE2C000E8F061A
7CAEA494183B9261307CEAC6CD13B362130AE56A651DFACBBE7A6F6747CB61BF
F94BF393769F2A1BD493E1E6502A3507416984FE0F7E509D901A106B857E2448
7284E7ECC2D316EC1C54EE4FD7DC9972DE33B46356E414C92CF8DF9E472F7FE6
7404362C8DFF6BE223B8886503A83A83348F7E9F88726CE068C904D45496494C
641E4443D9474344508ABACF3FF3424383D79A8BDFE6E9D9138E660EB3FFCDCF
8F4E01B24B3070E8B480064D946D0D200F4468EDDF7BDE9D3DAFF03B6D8165F4
0CCB584D542D40DC72554A7597A19EFF3BD72B8520EA71A51048F15E2CA53F3B
C3432278CC19751B38AEB52534BE6CD9BBD489444D313F8C78C2C252AB25AE6A
5EC7D05F3FC21202C4B30A7FF9E1BDC6AE3F6B39B1E09F65E95292FBB1915D20
44D7212A60408FC0F5A2E957BCEBE93DDDAD35D05D23F7E58A3602FB3FC1D431
754A3A21F181C437437D7A22C402DC82275DE903E256979985B6E794B459FEFB
393317FE573DAA5416AC52AED36AE9E79040097E2BAF6A0C6CB68C346E4EB059
5E8A6AA1C751CA4A4094257C39ED48FE4414BE73B4E0BF6394FAC05CEEFD1C3A
F5F5233CEB4625752057789ADF113E1E2F77F5B471A0AAA761AEB46CF37C2360
E701B0DCAE13D4583D8DA516BE2E264230DEEE5053AED15368B6CD81DB761A49
9987A07FC48E1EC246D04D80D86B32F7A093AA23B769B0DBC554EE48DA202C28
55847E3D36D80B7C8E779DFE6EAFE3EB35811A1EF80DC639195D5810D90B4DB9
6BABF8F4468AD92939567DEB43BB00CADB46964B73AE13ECC82C3A57A63A23A9
92A46206C70B027CE34FB81E6919828462F8C2166AEBE9663259CE5D4CD8084A
8BA479CDB203F1B0C3579B3E0B8B8E7AA616D798970A11423C391C25EAD95351
A46A856512518A92C7693B42BE92C2E375047E9DF8620B624AF8DCF2836FB1BA
801C822472AAF5AAA719038D3B53D0AE481753F2EC689394CFF9A911C42BE535
C5B4A187712D487C63A0C8607D67D1DBD0EE766B526184768A93416366B2CCF6
364F2D24B44021D0935CAEA289B120A613378399B53E2B50C11F67B7DC4BB1E5
861D745B7FA3C7906AD591765884FA7D746A19EF86C30309DE0F43D4747EA290
8E3C68BAF4D5F4C0C4E08DCA301E46AE3A0141A58074BA2EBBAD8B3F326C240E
ABE33FA5AC689444E7E04B78C29E49D3A128567D08E712C5EC42EC1BD3D95E19
5A7337B8AB2AA410EF1C0EB31D5766575340016CE477CBA3478FB68A98362C60
18CDC9BA410A545AB339B2AAA2934222DA734F6A1AED9942B43B18BAF77FB63A
71059FA66EE04B76730B499FA022A52139BEFF9CA6CE3F9855C7706E3F804F6D
D622A6929D049F921079DF979F31828C31A73CA0238C0D2F11BE2FD68F2228EF
BDE9837348C10E9F08477F754F6343A39736386912D6BC865BE30D1862BACA23
0DF2061049CDF9F894D73A549C10E7BE7790043F9A642E4676F9DE2B934A7F8A
7B0917DDF3255E6FE122D88DBD80252D0C1C8047A13F835E3FCFBFC0AA1D92CD
F1CAB8D1C673EBDC5601B84615F513E4D9FE1F8CBF2337C9FFCDDAC85B6922E0
0BCB0DEF0FA647E6828DED2F5B20F227AF3A792C0C63AD888D7AF39B10171FB1
A24840EDC55158FF3D8513C89F666A2DECB4AA4A1D46503919A4CFD911977DAE
4779F23271C23BDF14F4EF8352D9C66A7C24100C28CAD7BCD89E6E344EEE173F
CF8BD462E1C67F06D73A9085A2AD1EA3DFCD19EB5FE217406771B80C8A3EE798
A4CBFAB9AA93672B8FC9D02014F7076FBB477A777867C6A6AF2E6FFE3CBF3917
1E4F68BCED22EC345F87A92480F4568006BAC16A2DAB940CB9F3462D254614B7
78ECD86F7C3B3A7DAF06DA2D790F353D9254133C38D668C38082D0CC1BDC226B
4A7EBB1460735A5CB04BCA4D71995483CDDC9EA7D3E070C00D5EA6DD4AB539E7
E5C8E436656C99F30B3B464E5BA6CF7025E098C1FDED8B76260ACF62D1A08DB1
F126517B05C47376D20C999565399B06CC686A817B226101AEE3644A706F3767
372117607576BC2B9AD2637DD13C76F9CF2A356F1B9101496868EA8875C94C3B
D181936A02D5387D1C3C285F2DBEEA25457F6A74FF7E00449FA41878776C0DF7
C58FE07009574AE6B457F3BDE448E71CD04AC7E3C22E0CC8AF56B8B5611C4014
3CC20A39A5FA3D9F6A5599495BA0457109823CE71BAC2B7057AF826DC623213E
A6738E640DAECF08E69FE365741CFF8858337131B53A0AF9E49C3655F62E367E
DE824A37A5DA853E1DD5970EC07D3594A59DA1AA85D4FFE3E9E7745FA7FC7F2F
AFD4B9405C7907F383A5149D4DEACA083B457151CDCE3BA5F0C350945E8B92A1
635239241B8FAF7704E3013EE5D21F421254F23194B537C36F8B673E70073189
8B2DE6C30159232A2D054AB8254A450759ACE9C0B94DE035D9D6E5024E8AB56B
644A5C3EF00A5B2EAC0F89C5FE8D7DEB9BC817EF1F87C2BBD956AFE4DD4B50C3
A3BA4931A32827E612DC3059E97069D3894234BAC0E9AA1DB7B7EEE7F97C648E
0B7E7012CA4977258733C72CE466A2EBA8F2B391BDB7652BC07C2343FC8A4B5F
7C6B926D1B751BFFC6FCFDFAB9CBFF6D630CFC8BF374DF4DFB4B0845237E1E0A
E2D044324B4F05C8C96970451C9348E8AA6F1153EAC8BA1C57FFA09B3A181CF1
3EACE89F204BDBA7884FF6F90D1D0CB578DE1CDE56F526AB11F9DEC4FC09642C
A68C8F1DD2EFC7BB301279F474967B1B10DD7FBA6B09B95E7B4D34F66CAAE07B
F792BFE7755882FC790961FAD109A7C35258021DE25BB14410828F9122E01428
D72EDC917C835553A30FBCAE5D067266A205DDD3AF3A4734371426968A7BF7C7
9F48A5D91B596D765E15356F388E74D100B2243D230BFB33147BBCB298320930
000670CB15B7EE9C787EC751621851C3BD5EA6E70FDE66C9834189A9B0D796C4
1FA4179D594B7E8A39987A3DB806F337945A02DDD2B33D43F1E39FD20F41CA25
BA3B5ECD3B32F961F4A98BE40604BF61732690F3C8B247C6E381AED4F277788E
223F8EBECE8CBA7F48801118966E39D4EEEE3F04B254A87EB21C2E4B00F15AE6
F1E2E59DA6353A45BD0A5BF4B822D86E0E7237809C1F0129B83BA2DF82D5D54A
522697FD78DC73D8A75DC6BEE09FC523E5DDEA837BEDD90DEFCF214640DFD4E5
477FD73B86A08885AC44CEE72F0E27AA63A901F2DCC7C42EC261EDD9699A278B
507ABA7BE7101057297C6A3D67C37D61CA4015E7A46C30202617F3585D719309
7DFF48AF4FBDFC7DD9F66E9549B8B800DDFB2D8AD69B3C6D2C3410E982559191
93498926825E6A96A2CB12F8FD15F858AA28E4F9A9D1457D7B9AB16D9B9D4D45
8FD6853853DF5851C529D134CBE17C6B99A8286519535CC1368407909A5B3CF3
C75B4F86A40BD2EAB1918F03D93A283EB119A8F63E346E7502F0CFD12369B2B0
09A2AD610FD210E8CBAEF4C0498B0E53BF4EE1A00B0C067C113F88E5E000E6F4
FACE37B09D72B4242CD320E4F72F5E123E5578ACC48F604124A0A45559E1DCD9
B58D9EE14F3BC6B4452B9236F6A3CAD7FB7E7D5C949DF2875CE44537DBA8B1D4
C7ECEB76F55EA06D56209E0BAC984AD37A459B6C45B4D7F8B84CA66BF274F1D8
02BF247751733715BDCAFBD55854B0F436BCC787F66B44784838F56AA29F83B7
7D46F0D88835E45159413BEDFEC525BDEDE44291003D313CD2268E240C2388DC
37380A430557D988332DF505B16CE488AF68C8F8626B7EA790121D6ACB87D94C
83418919E0CAF58E41A3E036DF13D13C6B107500902A747CD7D7BF12235A766C
00539129C31EA3E738733C4E443698673AAF4E9588AFAFBD00577721011A12BA
D556591A82E2739AC4234917DD7A850C05F595BD87E0F7719D42DCBD9D724C85
520006A9069E1CB2557D2F97D7A0C54AB564DC62759F793D60A4760854AFB05B
AE445CB9131D0C14B6A6ADFE12DB225684D8254EFD295E7542031CCADC4B27E4
F579C84F35DC502F17DAD24C1775F15F505888F0C3E0FD42357ED07FB5076E78
E862016F7E5835CD5BAF87CECAC4BC92375B426E9512928E748E0328947B1844
E251F3A6E99BAA5B97045D1ACA798296D0CCEC2044E59F32075BB7CB7C636BDE
755916CB59C802761A99B211EEB550EF9BC14AADC70818D0053993C9F299B3D5
AB1427B463A4D76459385F036A95770A8157D225FB75B2C92CA39D1AE7411AD7
19AB8DEAABDE9A2F7530B474CC7119E4335AE12A9CE84BA7FA92AD46D6A7AD54
A676EF1B2B0F3A73E6FB24B20F9702ED522DB7BC30DD2212ED63C88128ED1FA3
7B05D70B0BD95BC58F1330343EAD91AED48EB4252314CA3B7FF921B61E040858
EB3F545F8A8ADD86FD770249BDAAD02613AD5A45C3997E33188E59E004E2255D
BDC14AFFD80F49365D5006821F2A4A2F801820D4D1DA9D11F02CA514EED93425
742D97CC8F84E529FDE0BF4C6437A849A6630BD6760B31870D69C4C15EEA09E1
831354F7C4A70C5F04DDB4B27952C3745B76EE5B168F047E59360CDD5D084D3D
BC8BA0C569C7DDE62033CE401D65C35DF34D2875D4E6E83E7854E73F44EDBADA
9368225FE24670C9B44536F724F83C7A7563D090FA9FB71201D625F00EEBB6FA
5D427979ACBF85B44CA596641C33E6F388E1C1C7834626B4C96C5C20E4F6AC8D
47EF32CCEA3A27074C0178A467ED1223C8CF29FDCADB5EBBE89A170EC4EE20D0
D070EE364ED35373A9784D02E65604DC7FF738CDD6EB1B5BF1F8E8CF86FC87EA
F14699937EC5E60FFB3A13AC9FCE3CC664E3B6EAA7F80BDFF45A5C9C32C0BAB4
8CE9F69477C819EE42C213CB237B187A7B54F41B54433526B5BCF139EED8809D
EB8E04A2EA0661B96E1A4172B9D4452D2F9BC4CDA3C2AC3A46DAD7BA069CF80E
2A626FBA2FB7C717977A24C48C184E2BC43534B3CBA542C2C3C8DD4FC89880FE
FF2DA83D890FE20793343B5F1DA8C37CD161CE528876AE34B0A1841077EA5E39
0660C11B97A685552364280712CD4929164774D5C13AD7388AB72585BD378192
057B2BF52E3C5B106DF695D6DD88C048E99BE97280ED370DBEF2FF3DCC79774E
2F5D87B4714F51B71531B23E798024B6B57314216D7D41199554B6B864EE527A
5CCDE74E2CBE14A20F56A2878B90F9F54FC822A3F35DD4946516799B1BDEEA2A
7928CDD09504630D4DDD93D551BF42330327E860A37828702857EDDDC1AF0EAE
5A97DDC272FF70D7BBFADB72266E24517C5970E250B4DA6122F7E36D1DC35852
B6F99BE96CC932F14E1192E9E447F20DCC5F0B5345153477C5C1FD823AF0E35B
2F04B9A3A02C1033D9793F0025A713D3EC19CB40F4BB4E7BDA33C33E0F0DBC83
D4BC5DBA1030150CFB62B8578A589C9240461F795408CF393A228483FCABBE54
CB9DE73EB328EA9CED30891422952AAE8CDA6C5BE985667D6CEA6B9F46380C78
55EEC149F95C85DC0D3FE55494066873A19321FF6C5CBD4F635A969E25DC59B1
A5B5A0EE56EF718C6D9E183953AA8F648757396436643A2D0E5EE6F9E99C9335
CCC0C684FEA193EC02ED8F6E46597F7C1AE466B0C21A84E744536C75139FEE93
8163FA917D30FA36FAEE9812D119A7C96B76847FCA1912C426BF373C7B0D91D2
81606F687277B039310312EBF090FBD762AFEBD71243A1B582D881BFE7010A73
510AD1D0821946ED6747592A85822E0B838C0A7DC1E7DC9C16AF9CE796783B3F
2A13DCC05347CA8063D6D717BB30A4A86076D343E7362757C4FB6E4A744AB6F9
0585C75CD51E1C9AC0FD2488F0A1C1972E3027B512B22DE47F4566006178B695
F941542EB9B779D196C6603D244580E9BCC29C98A0F8D04B116790E106D46769
210E48A493B5A3EA570335E4483D2FE17FABC0DF42C07C05E7EBC7E81973346F
B72B0BFBD5F4A6583ABBFE58B7EAE714A19F1CB23FFD4BF28AD9049048AC6728
3867AC95602148B2901B4E7C9AB67A2D386BBAECA5C0A4BCF182CB1FE91856F6
3AEA6CBB11393739C80E6317BCC6B8EC1668A5A15D3A4400CF61369D41B5F93B
7D699BF203A909C7E7AE2163A3589E7B38363923E1861C6EF2D880C2EC55587C
653C4413FEF7FE8BB04CA8F66038A2B8CF1BBC19E007231FDB4CF16123266B94
582E34382B5135D28EF7CA68801EB8C9525003E31CB8CDC6A81F3D635084605B
ED4619BF937745A94B98F561E3088446207B1FEFE66DA64781D23A97F7B32CA0
4BC20EF687A164D57B8CC0B58176243BEC2C725AC1534F508307C9464DD38C3C
AEDF90AEE7B7A3E777C8306A9254C7A228D37AED24A6B7BD3002EA95A2243DA2
71AE59583B5F81EF1C874E6110B13F4DBDEA7C926B8DAA048FC10A52C36C781E
893C90FA6C9916D47916A80B5F15CA3B9A0A09D6DB5657A0F71DE364445F80BC
DC04C3BFD14FB139F8A972D69D32658B818AD29BD2EE462DCA0C7F90F554D903
1F88657D51DB45CBEA560E0F6EADAE7F00FA38AE1A5A09EC408BE0DBDF5A293A
71C5F8E3DA4B0BD4F5B2AF40EF1641D9F3AAE99C7C72F71561FB4D758AE9A8D9
B1766FAD1374FE190DB63D26151CF9CF2D4F423A223E5816708BD85A91A36310
4756652314C8D02C53EB746C57B05E8304A43319C55CDF8710F2A20A325CD055
2C669DCADDB1D176FC7698331EDAB51F0C82896CB6AF88F9F6ABB03CFA0E7A84
5223DF809954FC061FB4707598D0965272235F4FE63E131F50ACCCE91921C0E6
AD4810C5BE0E14B233F2F5F09B98C202D6B36D49791152E46CD081D1AD378957
E06E6F0685DECA3C120736A72E1DD47944E74A261954FD96905093A7DEB7DA08
B301FD92C7EC9B22FFE2A15839EEA4E7B288B258DDC9AD2C924DDB98B3A6BD76
3D9EAB4E69DB7ADFDFB188D98663B67CE84F8A07A8B2B3DE016502124FD4A63A
8D7F67B7B0B14061339CA364B129BF36CAA480240D154E32EF8B7BDA62BEEEF6
1F7273B238EA423E0A8FD49E121F92CAD60E09130BADDACD8981640773679BA1
DBDDF9415C3F1AA6009118FFCFED0DE47AF7CCF8E47DB9D55D390C18F0A4589E
52C6512432384DEA0CB2CBF1C8FCF630C3FDC8B381993132C09C93021E48C277
11E7D3B01D5D350745ED4AEB7B7D1050239035266747295516D1023A6D4DB0B6
EA9AF3F018A704F85C6FD786D147AF35DD9D35C1A7275150D82CEE420B04C7E0
B51D7DBECABB91B166742DBC1F976351D4CCD68E20A0CB76007C1EAC8BACF29D
8AD309C8B3744D64AD5BB8A26DACAC976CC61244AFA1A096033D21CF5F4AD851
77013854B10911B6AB62D9CF8DA8B3F32069362D005D2F34AA91A8944B49F2F5
3BD35A5F4B098B74230156B0DBF8E33E4B4F17E6231F44E9E103398895BE1E35
B98C5EB89FE02713AA41FB8FE44233E4E54C8C02F1D1C4C72CAE7B31F7068DB4
81918CD38114C299AF666522E2249BA2D9EE7F53BEA04E4E1C75001AE9954BA5
350C67B21D5B982DB98B12C58E08A7FC8A1D168E2EB23034CF10392ECF1B22C8
92FB7DC582BAFB20BABF702CF12536897E49F3EB4321998E2FACF497B0C7D08F
D421BA8C79CD8F6875C9267A1226B352A8A1B9B2D0CA44289581E63F86203892
CDEE915E4E61BC65823D51D593EC011ADDEA8CB02D60D33C87DB8C72012E29C4
159E7E3C96A902A93B3D127F34DB222508BC420651C7108628BF373C3D21495B
E381FF9A92832CD72EFE624B5E8FF8666AA85D41FCD19DA86D47FF663B0C4CB2
FE12404933695EA0B4040A7BE8445E329CF096C6B18B600FFBCFA5C1908CC030
C7D64A6C124DE70D363C1140CFBF27E160E292F887965C917AA08DF69B7E388F
C52E6CAD45566D9AEE25226D50183163EF102C81488BAF9DDFA02A2A760D93D5
8912C5EE9CCD589342CABCE69B1EE6A31116E4C1C21A90C2C7E59246B71F57EB
258156DE06DF80B8D4E2C09BF496922DFCFDA1E704DCCD454DB3386A6940E89D
E24889D289A053B271B37DE7FE07CF23FAD837CA79C4D377B653F695AC2DEDB1
70CDE2A8362D637A2643CFB337CB6E57C693A8211ABD56C4E1D4387D54E6CC38
A1BF0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMCSC10
%!PS-AdobeFont-1.0: CMCSC10 003.002
%%Title: CMCSC10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMCSC10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMCSC10 known{/CMCSC10 findfont dup/UniqueID known{dup
/UniqueID get 5087402 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMCSC10 def
/FontBBox {14 -250 1077 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMCSC10.) readonly def
/FullName (CMCSC10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 69 /E put
dup 80 /P put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 118 /v put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BB89566A9BDEC70EB4F2
048A6EB631F05C014D372103E37FC3FA317EBC9973565A638403DA02E48B7D31
CFF6C241DC5CDB470561002FF46437C06EF93BC99352DF04393C661FFFBF4BA2
0723ABD9B3E9CA9E63BA57EFDBAE684655CBBDBA15ADAE43E1A2C98A3CF060A3
D16AF8FE3A49B50A24C20EEED716E49AF6013D4D38CD9CC41A91C17E4D04D79D
567E1EF49110AA9C34464E95D81A730ECEB2C9AF38FBA6B45E253288438B4CB3
DC75B3A906D4357293BA41E59C35223A6C9CBD6FF5FC90C2D07CBB376C7320FF
435A6251822BFCBB612CE630EDF826C37E95F541C21B93FCE127591D5E38165E
2B58A34AAE37712BC58B63FFD70AB80F4F24612CFD2F1466BAAF3CA2BCB45148
D0DEA0E9B8FBA4C4FF5B8B3CB02E461355051842BD1C94F41066B9B909DB83B1
DCDCBEF7CD00A43E4C0B8191A29600CA197F0BA227FB8309BB539D2A620BAC70
8A1AB2DFA51ADC9873B8E5582DCD3ED154E5D727D1665F99BD89883D69E6CC2F
DB3A57AEB612171A88E22F038461DE03FC357F771675E34E90D4D19B4B36891C
9D2333960400E97494F4FC4DBCE6A73C34A0409E433BBDC0AAAEBA7D3555066E
1CFBB4515C8B573C9B9DD12ED5B6ECEBE35AD0DDEA9DB004FC6CB540B5117B49
59CABE5FD74C6F5B6482B42C20B5FF0467D1DBD7CED2CC651CA57852B6FBB402
A6764DB342889132C911CAA713A7F2FDD8A5E849345D6C81025E02F5B8B682BA
90CC9B467FBC37362436EA6BF8EB62D784B01D5430147945BC09D1F49EE89F2E
3E2B8E6D439248A56F82F2E03EA5C7A922F2813BE6538A3A423BEBC55B345AFB
3B3C125306749E137C647D78028AE1FBF3E1A82C260132832A9668F454D39C41
736717DED0A99F6B11F005F0E1D07FE84713AAB4C042FDC166AA146D7B5E9198
E4F485BE5B135EA281FF1C1E616B5AAF02771F58C5840CB5A427FF9794F93E94
17FD799C78AED1DC4810BCEF4C6C51D3C1504EA2C6F2B29805B7ECF97B5F637D
FE92E168CB9029E90404CB54FB312FC7AA8A9F2F524C03E61F03B1E31D4F061E
1677B39D5D30C9FD4673E1723F4AE3CCF38593AD6D7F61E9DF3C010E51F25085
35D51105E1464BA146A78D7297D4D310AD91342A0BB942034A3EC0696B467367
3E39D202D637E6B14D0EBCA6AD3CF22B07D4CA69C0FCBB6C93782B2F0DFC5AC1
5D8A16CB5EDB671A0C1BA9D10F63CEAFCD0E06E42C730C8EF769CCFD57937245
658F486036D37E8BDDE5670A212FB488A8753322A5B170C9662750AA958C0BBD
8E97D8239D2A08B30416504DEEC4E506013E037C91785C674F8A6A44E23FEE6F
CCC00CC5E4D355B0871FDB8ECD64F70EE32449BB5D6F84F8C8AA2D5B1A489BA9
D7FF2DBAA8D0B84054E93D64D3E77850A3724824914A0F821EEC3D605DD851A7
606936B8B9E24D6E932E16C448140FE94DD96C75AECB73850035ED9C04A1D93C
64B21E7D4657E030483EC5C3554AEF8BE4D0FE5B9743B875340B09E01273DAE8
F256C50A1A8F2E0417440A8BB0173F59E11523E1CEF2593A4AC5AF2167627B00
C5EA97D125EB8A4BD4C372877ABF10F5B7B149D73787E0834BFB3084E9508DF7
072DD71637019599252059738D4D6BC57A9358E4B14F6AF9C4B31DB8E25C29B3
7A15F9953BD73ACDE5F0445A5DC406BB4635FAE51C1D8202AE31730E6F355317
1DC197DB0B6177307C60E5D38F4487363EE051B2E609A52BC4D45B14B6558B6B
5E1618748794B8340752CDBE7756C068975B559615D4CD5A97CE30BAA7B2B1A3
2FEF2E055232B24FD8A21BECDE1B6A479A28EC80AE2CD16DB50B30B4A6CFCF06
491C7CD5AC29FB964D4846415233947522676DEABDA0D9535F8507D33693930C
B4E4240A02B0CE7EA288516B8A6EF908D7F8BAF9012D052C6AC96D9F8F6ADB07
8984F3559C5E7E3022A957982155FC9CD599C74E18328D3AB46F9DD15D1C4C3F
9B93ADB4489BA02CFCF57DE6270F3AD2F8597BE71786510EF08142F430EE5568
4F9DDB792B7C46B6135E341DBBF062FBC50FABA80CD4A384157BAE57CBEA9781
AA4416323265168AC097DE7E30A0D4750143A4FCE70A863A31876A8FA5327C3E
36E89589E363AA2B1A6E8B09F5AEB8FFFD0396067173465B6503383DE517A6EA
88C0FC08578398C2A721E5AEB29F4AC9BC990A50CD87BD35A11F9E81F68E7B85
5E5B95A4F9A5D30379EF90D78E1E466DEF867BAEFC4F5ED2C762BFF099C1C2B3
5E0DA1C2FB33BE1379413CDDB1EE6BB3A495331F72F2FAEB8152E8AD5FD334A8
AAB0082A71D5574B618EA8D487B8FAF1B445F3395B1E21224F5492A0E06F5152
7726835C900E2E52BE3B7B654183AEDEC68053DD0AF19EF6DBC10B6FC08EC7D0
CC0E2C8FAF8C9A4C21FB7C34E074BBA4EE64226BEC8C928A784C1BEE35B72EC8
E9295240B29DDC2539CD118BAC38DB3917D14CD33AB45FE47E827F2A2B193AFF
53C5396C52CEA4F43F06AC2D08C74CC85D608CBA267175EC31311EE25AB48DD9
FE811B411AE426C9FC0B6044D1EBF130231623F1566CEA4D1C06D8032FD9808A
94479C842BC41B675CF6B90113BD681F8D43F51D5016D80EDC11D7640FB950D4
E709A46184406ED90D0892A4CD9062938A8205697A200DBE1F38EB166EFEA0EC
4FCB45CDAF82EA103DD6FDD03D146F3E42EDA6496064DB3F4FC1C5280C9E604B
D5EBCA08BF2AAC90156C11EF68137DC76502EBF216F3AF3EE30DD2676D218428
F41C655093F8B530FCA378B5769F262A6FDB4B66B83F18F050E77227E28D71F4
5F4425CB8D51B3DAE872CD86D7804F870BC564A6DA1CA13EDB00D131CE4F6460
7021661B99612629DCC20C85CF155EDC5111E015A77B0B82A8FC1EBB374B7EF2
361419BA93B857D5C9944BB5B4AEDD86ABCC261542077FE09701C96370168579
5F89D5AAA08D700E2643E88C2FB8D1D56D37AAA9744872E7C050B4CE046B47A7
83F224FA9FD311C955EFBF173042C8FC66524135F579B1397828870D5C9DC71F
8615FADE2A1CFAEA90F732B6C266E2F3048FC43EDA7A6B6D98E9DB793CF457B3
F5877E7A055C92B0246FEA8C72B3B3456F93BF36E2651D32CD614C3AECC0B4BC
F824C8363E593A6458D37408FC5B09883B280005DD24123E2D4B1B85F4113327
EEDD9186A4AF2CD6439B46C5C168C125CA80F9EE9E68906620EE126CFBF26E15
B269838A54224EDCFE2A373EB750D4829BFA410DE5F1541E428BB1E024AF496D
F5F1C151F5A645C8622F2EF9088D57A2811868A8A8BFCDBFCE3ACB8463AC35B4
8B6F44E1C1232805842F56FA468F81FF37D5D55B81CA56058558544C142EB3BE
07CFB1F75DECB1E48C14D6AFDD455989AA6FFE8B8DC54F462B3C20E31D270BCE
8E68E2B43A6625AC7E9792704FAAD6CE8BBE0B341DA7189EBB3E9D5375B27FD4
12506D5BCA50AEDC6955E6C3C7BAA84BACAF7ABDF3A270C7734EC3C6EC22793B
E67B0E288F99699D38DA8B79F2D21DD97945FBDDD132A8F0BF947950D3C0B4AA
EB7B2C435AFE54489E1930610311D718AC610C21A644F34CB2D1959B3066F39B
EADEAB5CFC6AF4D191D86B02402B00D1C5262707861C5308730579795EB53207
A291A27A8B5C4DAE0A87A0C6A260026CA3CB620E1002E066A515D7990F3DEA29
0FAC962E0B82B7A6C86B1EDC54007822BAECED673FAAEF88C8109777EB79A53F
AF3C58546974F2F56E70E9B5CB59ACB5C27CB01895557B2D82134D7F02029B24
3331621F38E68717F5CB68A8892D0B9C0A8ED4F8BB56E80505170D44C6856128
2DED0254ADA4875CF56B4D97372AAE730D4C77A2940DC8C178274DF88A9EE037
215C6FE7B9D481EE4DE809B124C0270782411ACCCF89906A8B143D0BA8B2CEDE
E9B90465C3E57A4FD9AD2702323450256ABD09A1F8C26F08480317C08B75B720
70A161C99715A35A94DD5C9647ED0F8A5337B774C8E54F9653AC859485A1FED5
37B725A7E4BA58711CBCDA6054E34CBD8E9F9460179DA7DBD243D81A1531FDDE
BF2BD425BD9DBE75EAA333B1F5793669A215549A774597E6ADA16D323FE5601A
EDA41092730009A99BF5B5AAE281844A6BF3292D4D4EDE36B4FD8BCAEB6EB72F
AC5D3CD53D0D621CA9EA8D254FDCB2B5161EE9E80B266563F669805A3A15271A
0753983004A1ECC7FBADF62AFEA4DAB49A178C231759857DB910668BDB07CB3F
7E8EC24901863088B3231EE3FA563924032C91CA9D68DB398F9BD9AC0C651EC8
9051C9F709CD784F3FF5951DECD7E869ACC34B83AECDB011E6594347855EE7F5
28811F744A4BD70D4E9077EA7EC19FFCF612689F12B34332857AE41F13E6D16A
962DB9B6AAAC167B9FBDF0068EA13412F318384134B29F3F0C399F1973A3564E
F9C3C39B5BDD4C98D81A6CB476E565860B50704BD65ABD630A5F1372F2D826F3
3AD47C08B8AD3176A170C369EF3CEEB190134006D6135C5B8CCDBE1C11FFF1EC
3F6D8C46E15C4F5EB9ED9F31A129594D542D40DC3815CD075A0DBB648D868AF5
15A05C4BDB28BF23653A3AD96CF6AFC065DCCCB23D5D9A945F8CBB539DD3BFA8
DB8F1FBF9B6F25B41EB4309995CA3D5D6ABD70CBB4A2F0C6364E5439AD1045FF
72F6B45A30BD3A548CFAADDCC6C15D46F6D783D3E520215751DC98335A4ED512
D7D19235CDF911CC69F3CF4365B678EBF3E87C456A4E77339C74930083445588
462529C22A96A28C5CE87AFA0C981F26CAED5A1C8DBCDDA612624DBE0373F026
465185A4D8C73CCD8D71EE97116F8F7D341B87FD78F9CCB9FBDA2A7799711607
6BBA855AE9D5C505870DC85FDFAAA130A351D56AADBFBD6A7D52055E3200F8B7
8AE9A00092B55DEA8BDE224B4BA7FD4A191CB1FFC4CB995FEE1AC2883AB69E1A
AFFC09AB5B9AE311A030A5BA05E2213F9BBF016C8FA80689C069314D91274B20
53FCC65C7D7B3A7504887525BFFA060304931672A078BCD7F269595686310E34
E1ECA868899BC402D17EC36CE40D5041D7CEDA77F7764C9D98793F5334F574DF
E93CB10A5E8ADAE95CE63D2339557091B4B4911A4987CF21B7F1DBADBC2DD605
8EB72473C1F2EABCC44E0D0339EECB55DA74085606C3F89D57ACFBF5755A5395
CA8D4BD47E4EE8D8B882D3AB31A1F0C62E74654C7E041E4FF2693A38A9796064
46526B0A37E6B5BF8E48E80EDEF81E34DA8F6CC9025936A4D0E6D709D61B7B5C
AB550397117F3F9D2F5A542A64DEA8E1178F7337124D6B56BA92F659AAD694D7
391028731E01284BFEA635314A8DA8DF7A34EA3B6B2F8803BE6DCB423A9E8015
55EBD90EBAE8A00298B3B6B1C02BA516AF528122C1F2B07EF69F5466C2C36643
0D665D6561705509B7582D8301AF3C32E2F3B9433E3E04D62117C7E8A368BDE1
0D4DAA1C415B2A6573116D2A169AFEF700A83F55D88813585E89C94C07802BA8
3AE8F9BC3CDBFD9C2E35D062B1FD6E79E1EF104FC70B0AB09D12CA027F33F85A
22F0ECBB4AD55FE8C616B82C46CE69A600E4F767BD7A9C5F9B37A3196B038384
5DEF76A8884425FE598A63AEB19FA698C2AF7CAA4983CEC789268E22BA051EE0
20A40633D22D8F707626ED30E8273EAAD1C065F0B2E1718B5AC853ABE09330C3
B0082A71D557169BC1559B6D285A3499D41C4CCF1F74884EC3917EB9C574371E
AFE8578DDCA459B8D22C0188A8D150437B05FB92022C95EB6FBCC954216B5FED
CBC7C90B9A1F061376A9840FB64390A6BA99CFC8279A86A730C6DBFD14C53C4B
7277D676BD42203677E9ABEEC8C97E13DAA626474513B06F8734DD784F2FBBB9
B3B448B8E8221E380AB4A86D3A683B86A54129519D50DD4FE63B30954D805CED
A9A5D9A39C58B65B08E1C19555E927C6DBF7FD07252B2B57F62B905D6B488201
213D106A41033B26FFBAC2E616DA6ADA6D560BADF10E68872806CFD6F6E19D7B
57CF1F7A030A7BAD374F16A977E0ECB8742D034ADAF9C247DA19C8AEA74EF6CE
DAFD6B1DC562FD3B77E4D008BDE4D8C7FCA9895DA1AC9EAA01C32A0DA712B082
9438E77230D38FC4153E1711417B918BA6CC03203A5FF082AF880F48518D8271
C1121E4F1386B30A7F1BC6F10EA98443F8A65C867A109336B808BC9A8E2A75AC
F950835AA84B56F59DA4C8A18859C3B68F6B6DE09A6675F639EA9107BDB67B0F
54EBC564BC2D781B61C14363A54956BA78A2BB89C9F966C94EEFC29EE9F4E23E
C0BF750144DC289F0DEE1F8A25BB52E54F656FAFEE4BD2DA57E1306BBE648051
1D0CFD6A23A3DF082E3CF13197BF1B7FB22B2CD427BB78F455C9634DF989DC90
7BB2AE247B1C99AB2062855B2948341B0F857ACD750B59E370A6698C6A1F5287
72A4A9628A592E313956C242DF8277EDD2F1FDFB07CDC104275FFBF796D7518A
DF49FF3CDEC3BDFF1D290C382F244DF18005ECDABF0C5C2C64EEC4383E2E07DC
5C82587C071E59B46B7BEF31D268F39D9B12D534344FBA515E9DE8F166FAD1E2
7D1558967AAAD3829D3F7EC6938D20E5379F414532976ABA844D97A5E9078901
EAE4D0ED1F4C7EE7A2D80D891A5013D6409A38ACFA497F5A169EB7F9F4890DC4
62FA6A89EA48267331F086992B9CA9305E16611E6AEE67DCDD588A25D37F45B1
0DE75C802EE021E574B64B3969DE2E5061ED9364B646C38D4BBA86802CA6338A
94E135D2256920EBFB1AA22D9E90C7D16853F0DF9F2D942748EE540E4FCE63C6
5380D7AB4ADD6CB00FE8F7867E4862D8DB432F28331428CC350CDF7F447A65ED
D7683ECA35A22ADD06E9FE6BAF060913AEEE7B2B8EE4798E437698CC9EB2428E
74CE73F84D0D2292DE709D71FFF8901C3505370E6F1D4E28E6B7372492C65A88
159371B1D60D77CEC93B272B6C5394EE1D2EF9969DB2838B8E128553879A1BA5
2884B0A596E8FC3D1E648B7E26A4AC57DF09B9CE09B2F91D8CA618CA52AB3DBD
D005A56A420366069B73146A6F58E88BA49671A1AB7C2070C3D42AA770285143
40AE7D7868C0E1993506B07C086AD7D4F28CE2D15853FC5FBCBF9425D8012B9E
DB6E1E5002517659C8DA69DCEACA94F368537668843D281FC11782F1C5F71977
CA215349EE6F20565DE3D8D8212A40E1227A4B22965FA64A0B02C62BFDE97E6F
C3C54FED4057EF9D258C42D7440C78C5E0CC58A40DD74ECED4152F70A93CE71A
1B3A57C46F74A6D27BF98C97CCD31A8EA487260F224A3E40F52C65490AB4098A
7B9EEB54A5A415C8C88568F7D9EFE74BBB785FA18AA27D9201F28BBC477A20A5
D1307AA78EB8C7CAD409AB64B29E4115E45F5FADDCC80CA74B296C4265A40614
37F2ACD8386AC0202D6FDB6711E8CB06442F209D781E940ADDD6D881D4F8E874
357C533115923B90138FFE31D3577C6AAE60D768970FAAB682CD0DCA3E9A9A68
6393E4B772691C1013ADFFC90C508D51B02D2518ADCC7E79F7DE5DF9D18B8435
6129064DD1A3995E5A6F45D78287CC10A0EAFBF47223494C5EA934B1BC2F7C53
686C5880303F9E3ADC8B100D441D944686E1FD811C646C6DD0224F6CF55FA87F
D132EF50450879A25242A18683BD6D0266F8F333F3768D1952B0F32AA75106D8
EC0AB703F287E847CB91FFB88CD9DA174B49171822BDE34621CF41EA772230A6
3088F8D19CF2364A329162D39E166AC728B267758341630B00398D64538FCC4D
E3E6CF103794C29AEF7F7E56970F6B1ABA87DC8D23E280EDC77556593D02DFF3
154883CFE4EF04E07E7539A4750FA1CF1A994E99B656E728D140C83AE1F196AD
9F049188A4184C84556C0476BE46DDA8ED86888DDA3065C5091D99EEEAC43092
40B97ECF9E6EC8F51ACB40869E5A6E08A0BAB6B7892A232A3A1E688B81077DDB
844137AB35E862CECB9761D4FD3514C707D6C00DF5F2109C43785B93336E939E
B40A8E211CA36120572EEE2EA522F9BB1A60FCCF768D4D6E62F4F6521A7490A0
7CE1F14CD451B5A1D6149A6AE7D0F27B7E0E31F556E2E06F41340ADE94AF27C9
C8C0CEB284B103EF6D31C8DB0FE731362CB594A3D6D3F6FB52DA232DCFB65F66
B2FF61B4380D93ACBB9EEFD298C052BFC0B40FBFCA767F3B1EEA76B1520772E1
6C7915DBF8C3C012829FA69B8F3A265EFB97D093DDA4FA5244191C7F7EFADB33
2D0EA8344CF7B8F03811562696AD81F736B1C3AA2C6CBCB5811316E0C1D139D1
E6407C61D8DD5ADE2F04C13004D5F31EE929B8D5462DBC4AA6D48704A316A0C2
E22A8D139D91985FEF3BE7B937A3BE91BCC9AC2F4359FF77A2EC81D686435C3C
184241368906A4C566E76C74B5C24D453534A7FECC771106BCEDED5735E4E116
AA0593AFFB47F3F3BB30602EBDBB815DB9059A761FB609C52B6D7DB9A0A6310C
1B1C876006A573F53F12FACE12B3E27B2AA92920ACD28917B5F494B16034D58A
4B1D27519970B25A67FA52EF9026B77569820BBE1DE8724D5B11F1E5C7DEF2AF
CB7FA37CC69354C383D0DEA937B0A1EC4C27E4254CC7260D2683CAA547789EC8
C09D8A3BB0E5D27B2657DB2AA0A2B17AFA5DB8FCB819073EDE520F94A9FD8CBE
3EA35355AC509C4889EC55CF0E1C1C31D46880EF539AA5C0E56BD734D4C29D8B
E90CC28C35FE29CB1A9D15FD8A224248F586DEE4286C5E66D870B033ADB5F05F
27003FF5E54565969BF129E5ACD7736FEAB17ED7E76618257AF401639B7F61D8
36C0BB1FA354FA7F412F393236EB56C61DFB1EC9DEFF949914C4B69F883CEDA1
994A5350A3F9271A50007286611FE8D413C37ACF043B15D9665B7DA50376A618
D6BD2CA4279AB90D69FC76BA0A72E7A1E7F0C685FDB060D9F2F1C92E881772A0
D5D7B597F421CD52C08A0F3201D8BD4B9DA193893C929EAC9C9CDB509D5E6465
EFCABDCF6016D6F23279B9076F24573D3C530070E3F46F39424654C5C720A1FA
CBD0B48B330458FA9F874E31EC370C44B8AAE2A920CC32161A62B91B65F97BD9
08868059D3C02150681002C8BC8222A8051A1562DD0ACFB4BF160F8B7A9BE77D
53E363904D909E79CD352D2DC0B87427FA69F9BA369282C6823E46F8C9537874
9A2364D477F0DDA8B53E11F506308FDF7015E7FA26470EF1BC1553740A261423
B7DC9218F8B3BBDD7D7BD4EF7E34D4B568BE816428E2CC861B8131DCEBC31222
3977085CE861C526A384877A5C896DE6A4F0155CBEB417F77F74BAC17DEE0FFD
1695FF8BA3FFCCF52051C42E8FB9F85213BC5CC7286269758FFF5B33BEF0BE12
42DF5F289C011C33A29AC7258F74CFC858388C46F6E1973D855EA9078ACE9B84
66165679ED3B96395049BDC7C657B2412E2B8AE076482397B79B41E4FD13A559
FB19069AEFCB3F436D8FDF6FDF75F06CE1617BD44455FFB0CA94609A944FA260
A12F35E45673FB12C67169E0CC8EA572FD781C91C1E75BC316CBAB20B19EE537
960856B3F00A6856EF6A5616A67366D6524197EC9AAD173882A6AE664223F0A6
9C5912CBFE118B3DB82340A4FC70D98C4B7912FF77EB28068D657004CA050AB1
41182E5E160BC2742081A006C281D3A4A7B65EFEF3FCE228E52F646E222A3926
8A9A9F58C78FDC35549DDA6968C5EA2A393127F31C0C438FAABCBE6FCB6B44D3
500503C786A2241022C562DF1C85326066CF27EABCF8624D8808EAC4B1A335AF
C75B14D79BE1C3E94C0D73EAE3EAB7CAC84F77755E4E02F77721A92B85185F9B
D04DB93A4C97DD24431B5FEAA032862F185B69D4716A3D5C3C7360B83A1984E7
77C22A081A4FB759C90C22BC84A24B269F4E9B6439929F443FE7AE2B45E987AF
9BBD615E3582DDBAF65F32EE0B4A3FFD59DF14A2ABD64C316E452381C1BABF7D
3AC29CD509C70BA6657CCDD793041821206BC8EBE1EFE2CB9C411914BB0921D2
66F86B69C967A952C1478B01329392C787022E71C996FE279B11D09F23151DCD
8A449ED211C6902F2347C2BC27637980F3D14ED926890F5309B626AC132E21B1
5AD68CAD7284C9E6BECC592580F1376FECADEF40438EE792C55A9A3BEE6D9EE4
E453C2A638E6EF565CCC3BC9A1A34EFB0D18C76D5D8F80904678D9F09C5946BE
DC65CF1878867D6BB523169BEB76264ABF2A0D26C42CF9B90FCBE2F3542D9D9D
C3CA9BE396020BFE267A2BE6047C7D028B77A5EB34BB216E0EFF46D7C5EDD236
792FF4513B2DC42C88089A0CB6C0397EAE900B337FFC9FFB54048DA2BDF3525C
B12BBA98BABF1D9BA591DC20E8128044E0A36B882A67B0DAF1D8236DFBA54AEE
E58A0C29EB194913A790B846C79A9414044CEF9718E56F01DF05AB584287B104
6A455F9F245299947EFDC49180402068858714BAD28B5441D6DAAE91C3B5429A
1D3CA3954ECE48C2AAD741694B44C178FC270D05EE20FB6EF24E2BB1516B34A8
794C6091086FD6468068EF6C6BCABBF1479EB84F21F4AAE2AA2F64B9259C969D
C778FC3F6D5B37DA5B4FD7D4D78A183328D52DFB8490AD092EE5B99FBB50E4A6
7040C66376F4F52D3C5CF621EFA31491F5C22540BA74B81F407718CFF9496AC2
AC9D34896880EC741C90E2C7A9FDA9C4FE7B4E3E7C7730AA5DDFAEAA96CA94BA
7DFCC2EBE382D6DD5AD8266EED8A6BEFEFFFD1EC7511C68180669AF7511E1694
91E3B5B3908FA8223B121F6334331AC4DC7C0CE2A1B9FB357D1BB0607AAFC39B
699CE38A2979AE8782C30F4FBCD501B0A8BBB3B5FE8A63F212E97A8A92C6DECB
84CD90BCF6092D3D0CFDBD5934A724DF0CC0A7D84DA91D18CA8B2E95C8D26449
4F8771420A2EE8CCB9C5325DE995E3310C53B7D5B90A2631307267B27912316A
AF0BC0C7C880DE3675345FF19D83707C0EA62FC865F55A9239B32DC20F749D1D
7C4D023CDDDF0C68AEDD2E505FBDAF12BB5E61951DAFF2A350A7F6D8051D92A0
5F03A66552F2F467BC043F0D8D78F1461332F77B109EA01A94F22CC5E7935406
E19E54EC4A7EC4FA93498743AEB6578BA6AE128F5E74DA9F6606F2F61574C0AC
9C5B2ABE2216F0D0DAE095E6B1FF7495939EB1AA610A3DE34349A6302736265F
CEA0EDB5501E008A8CA8E8624A798C65C5DF2099C6A1A38D7F086EDAD0EC1325
B5BDCF59F0D166CB50CFE8982E00E2BE0D9F487C7999E506B76DCD95E738A5F5
EA5AC5AFFDE8B8E7123F69ABDC6D0DA5D233D02FDB5EDD0DD1B6B0F094A09647
DB90941CBE986864C46B14C2986663A92DC69BA51AC32FDA4FF23E46FD38236E
401672C4625CC56FAC1E4B7394F3FA7504BCE40EDB60E24EE05CBBB2EE6C4023
A87EA9AC139A87B06C0202CD9589B03581EF71EC2F008AEAAAC54E0DCA6BE395
654878562999EC45AD8299912BD99169DFA040E1D7B80655210325C05B793B0B
CD60C3F21A72645C104D1A9524F8C5AE97C4F9A16C600735C79A6D02252BA89C
29CD7A03F254E4F64A3696830841499F9FC73318F3F7C2BE9DEF30659794914D
736C9752DE6C161255ACEDB51B107F43F1149F416FACB7B4DB6443ED70199153
D15DB402034A449BA8621C7983081FD1AD1D64AB7B2C5FE0568D2922CC13BB7C
2A66FBE71E13BBE64D7618208A8F738B7F2938C011EE2C9095438CC7F4751D15
D11F80C8AC8DD14FA5465C916E541D71467B54582E8F7D28339721FBA698E501
CC9A8BF3030B2220F4099E94C7A08A7712F442FA16051C908FC87138C30A1B41
DDCA2D518E0956DA17DCCE5F0A706F53B888D415232501E7673AFD3E2CEDBAD8
7A351DBABECAA4E202F30F9C9B4DF96CEE32F0CDEA5DD8A16B3F01DF52F04C76
5C6C6723BE29F83BB30502916A4DAC9BD0EDFDAE59F5CA952A0AC17A7D1886D9
1E9231159FD29138C7B8D0C146FF6E228BFEB2F99B801D304D4D9BF0790D73C1
D4EADAB8BB75435B7EA7E03C4AEBCD96BDD339DE25DDFDAAA2CC10F6BBCBC0EF
7AC86FEDF9C4347254037BFFE61290C62DA6A1B9BEF454D0E1E8403EBA5CB66A
A6537987054EA0B382F33CA61BC587A5BB9379DA2FE61FF009D071A9B91B8209
BA3F3B06E7B6AE53166CBFC2B31AEDAAE9BB4828725B1762D37C642DF35C6EFA
87F0FCDABE3EBBCEE03CA480A8D89DE5326EEA502878B172BB238FF42D85C54C
CB87798E962B40EA578CAEEF42759C7A42BB46222986C84CBE8E0205335BD8E3
4EBF75EB5A7D37E8BC9C250061475584A60AB0F93692E8C10CE5742FA17ACE56
AE2F46E0DC0900A708A3FA21A55D2E839371B7FC1CBF35EE1A36AC242557BEC2
27D4A315FD37282ED87D96E0CB6C2BC27FDD687670964EB4CDEBB7BE8669C5CB
857A13987EB965506FA233C094F9246D8C7233876F940F75D5E5862D2A9C6D19
4C355886983E619FD972777B070E2C1A356E94AE002819937966A87949F40BD5
16E67A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (tabla_normal_estandar.dvi)
@start /Fa 133[42 64[48 48 48 48 48 48 48 48 48 48 2[32
27 44[{}13 83.022 /CMBX10 rf /Fb 235[65 20[{}1 83.022
/CMSY10 rf /Fc 133[39 19[41 11[57 9[53 9[53 70[{}5 83.022
/CMMI10 rf /Fd 140[33 4[46 4[23 3[37 46 2[42 28[63 6[65
3[42 42 42 42 42 42 42 42 42 42 1[23 28 23 2[32 32 40[{}23
83.022 /CMR10 rf /Fe 206[59 59 6[46 46 40[{}4 119.552
/CMR12 rf /Ff 177[94 18[33 59[{}2 119.552 /CMMI12 rf
/Fg 231[93 24[{}1 119.552 /CMSY10 rf /Fh 165[92 90[{}1
119.552 /CMMIB10 rf /Fi 138[75 52 53 55 2[67 75 112 37
2[37 3[61 75 60 75 65 18[105 7[85 88 103 48[67 19[{}19
119.552 /CMBX12 rf /Fj 134[38 4[30 32 28 1[43 42 43 66
20 2[20 3[37 43 37 1[40 19[73 7[50 60 2[55 45[42 2[20
16[{}20 83.022 /CMSSI10 rf /Fk 137[51 2[38 50 2[53 51
1[43 2[25 3[46 52 1[48 51 11[68 1[51 2[62 10[62 1[65
67[{}16 83.022 /CMCSC10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray 0.00 0.00 0.50 TeXcolorrgb
0 -129 a Fk(Universid)n(ad)31 b(San)g(P)-7 b(ablo)30
b(CEU)p 0 TeXcolorgray 0.00 0.00 0.50 TeXcolorrgb 733
w Fj(Depa)n(rtamento)c(de)i(Matem)o(\023)-41 b(atica)26
b(Aplicada)h(y)h(Estad)-11 b(\023)-31 b(\020stica)p 0
TeXcolorgray Black 0 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 109 a 0 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 109 a 0
109 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 109 a 0 TeXcolorgray 89 x Fi(F)-11 b(unci\023)-67
b(on)44 b(de)h(Distribuci\023)-67 b(on)45 b(de)g(la)h(Normal)g(Est)o
(\023)-66 b(andar)45 b Fh(Z)d Fg(\030)33 b Ff(N)12 b
Fe(\(0)p Ff(;)20 b Fe(1\))p 0 TeXcolorgray 0 TeXcolorgray
1277 1619 a
 currentpoint currentpoint translate 0.5 0.5 scale neg exch neg exch
translate
 1277 1619 a -273 2432 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 153.6454 363.74118 315.9406 362.14801 319.81015 360.55447
323.67969 359.1888 327.09389 357.59561 330.0531 356.00209 332.78447
354.4089 335.06084 353.04288 336.654 351.4497 338.02003 349.85617 338.93037
348.4905 339.38573 346.89731 339.38573 345.30379 338.70288 343.71062
337.79219 342.34457 336.42651 340.7514 334.60548 339.15787 332.32947
337.79219 329.59776 336.19902 326.41106 334.60548 322.99684 333.01231
319.1273 331.64662 315.0299 330.0531 310.47752 328.45958 305.92514
327.09389 300.9174 325.50072 295.90968 323.90718 290.67445 322.31401
285.21138 320.94833 279.7483 319.3548 274.05772 317.76163 268.36716
316.39558 262.67659 314.80241 257.21387 313.2089 251.5233 311.6157
246.06023 310.25003 240.59749 308.6565 235.36192 307.06332 230.1267
305.6973 225.11896 304.10411 220.33873 302.51059 215.55884 300.9174
211.00645 299.55173 206.68156 297.95819 202.58417 296.36502 198.71463
294.99934 195.07292 293.4058 191.43088 291.81264 188.24417 290.44661
185.05746 288.85342 182.32576 287.2599 179.59439 285.66672 177.09053
284.30104 174.81416 282.7075 172.53815 281.11433 170.71712 279.7483
168.89609 278.15512 167.07507 276.5616 165.70938 274.96841 164.3437
273.60274 162.97803 272.0092 161.83984 270.41603 160.9295 269.05035
160.01881 267.45682 159.10847 265.8633 158.42564 264.27011 157.74245
262.90443 157.28746 261.31091 156.8321 259.71773 156.14928 258.35205
155.92177 256.75851 155.46643 255.16534 155.23894 253.57181 155.0111
252.20613 154.78358 250.61261 154.55574 249.01942 154.32825 247.65375
154.10075 246.06023 154.10075 244.46704 153.87291 242.87352 153.87291
241.50783 153.6454   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 1 0.5 0.31  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.72278 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
453.87997 153.87291 452.28645 153.87291 450.69327 153.87291 449.32759
154.10075 447.73407 154.32825 446.14088 154.32825 444.54736 154.55574
443.18167 154.78358 441.58815 155.0111 439.99496 155.23894 438.62929
155.46643 437.03577 155.92177 435.44258 156.37677 433.84906 156.8321
432.48338 157.28746 430.88985 157.97029 429.29668 158.65314 427.93098
159.33598 426.33746 160.2463 424.74428 161.157 423.15076 162.06734
421.78508 163.20552 420.1919 164.5712 418.59837 165.93689 417.23268
167.53041 415.63916 169.1236 414.04597 170.94461 412.6803 172.99348
411.08678 175.042 409.49359 177.54587 407.90007 180.04974 406.5344
182.7811 404.94086 185.74031 403.34769 188.92702 401.982 192.11372
400.38847 195.75577 398.79529 199.39748 397.20177 203.49486 395.83609
207.5919 394.2429 211.9168 392.64938 216.46918 391.28369 221.24942
389.69017 226.0293 388.097 231.26488 386.50346 236.2726 385.13779 241.73534
383.5446 247.19841 381.95108 252.66148 380.5854 258.35205 378.99187
264.04262 377.3987 269.50534 375.80516 275.1959 374.43948 280.65898
372.8463 286.34956 371.25278 291.5848 369.8871 296.82 368.29356 302.05559
366.7004 306.83548 365.10686 311.38786 363.74118 315.9406 362.14801
319.81015 360.55447 323.67969 359.1888 327.09389 357.59561 330.0531
356.00209 332.78447 354.4089 335.06084 353.04288 336.654 351.4497 338.02003
349.85617 338.93037 348.4905 339.38573 346.89731 339.38573 345.30379
338.70288 343.71062 337.79219 342.34457 336.42651 340.7514 334.60548
339.15787 332.32947 337.79219 329.59776 336.19902 326.41106 334.60548
322.99684 333.01231 319.1273 331.64662 315.0299 330.0531 310.47752
328.45958 305.92514 327.09389 300.9174 325.50072 295.90968 323.90718
290.67445 322.31401 285.21138 320.94833 279.7483 319.3548 274.05772
317.76163 268.36716 316.39558 262.67659 314.80241 257.21387 313.2089
251.5233 311.6157 246.06023 310.25003 240.59749 308.6565 235.36192
307.06332 230.1267 305.6973 225.11896 304.10411 220.33873 302.51059
215.55884 300.9174 211.00645 299.55173 206.68156 297.95819 202.58417
296.36502 198.71463 294.99934 195.07292 293.4058 191.43088 291.81264
188.24417 290.44661 185.05746 288.85342 182.32576 287.2599 179.59439
285.66672 177.09053 284.30104 174.81416 282.7075 172.53815 281.11433
170.71712 279.7483 168.89609 278.15512 167.07507 276.5616 165.70938
274.96841 164.3437 273.60274 162.97803 272.0092 161.83984 270.41603
160.9295 269.05035 160.01881 267.45682 159.10847 265.8633 158.42564
264.27011 157.74245 262.90443 157.28746 261.31091 156.8321 259.71773
156.14928 258.35205 155.92177 256.75851 155.46643 255.16534 155.23894
253.57181 155.0111 252.20613 154.78358 250.61261 154.55574 249.01942
154.32825 247.65375 154.10075 246.06023 154.10075 244.46704 153.87291
242.87352 153.87291 241.50783 153.6454   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
439.53963 146.36131 256.07568 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
256.07568 141.58142 256.07568 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
286.57706 141.58142 286.57706 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
317.30627 141.58142 317.30627 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
347.80765 141.58142 347.80765 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
378.30904 141.58142 378.30904 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
408.81076 141.58142 408.81076 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
439.53963 141.58142 439.53963 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-273 2432 a
tx@Dict begin { 256.07568 129.0621 } PutCoor PutBegin  end
 -273 2432 a -308 2458 a Fd(-3)-273 2432 y
tx@Dict begin  PutEnd  end

-273 2432 a -273 2432 a
tx@Dict begin { 286.57706 129.0621 } PutCoor PutBegin  end
 -273 2432 a -308 2458 a Fd(-2)-273
2432 y
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin { 317.30627 129.0621 } PutCoor PutBegin  end
 -273 2432 a -308 2458
a Fd(-1)-273 2432 y
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin { 347.80765 129.0621 } PutCoor PutBegin  end
 -273 2432
a -294 2458 a Fd(0)-273 2432 y
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432
a
tx@Dict begin { 378.30904 129.0621 } PutCoor PutBegin  end
 -273 2432 a -294 2458 a Fd(1)-273 2432 y
tx@Dict begin  PutEnd  end
 -273 2432
a -273 2432 a
tx@Dict begin { 408.81076 129.0621 } PutCoor PutBegin  end
 -273 2432 a -294 2458 a Fd(2)-273 2432
y
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin { 439.53963 129.0621 } PutCoor PutBegin  end
 -273 2432 a -294 2458 a Fd(3)-273
2432 y
tx@Dict begin  PutEnd  end
 -273 2432 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
232.85805 339.84071 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 153.41791 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 199.85281 232.85805 199.85281   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 246.51556 232.85805 246.51556   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 293.17831 232.85805 293.17831   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 339.84071 232.85805 339.84071   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2432 a -273
2432 a
tx@Dict begin { 221.47691 153.41791 } PutCoor PutBegin  end
 -273 2432 a -273 2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432 a -326 2458
a Fd(0.0)-273 2432 y
tx@Dict begin RotEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin  PutEnd  end
 -273 2432
a -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2432 a -273 2432 a
tx@Dict begin { 221.47691 199.85281 } PutCoor PutBegin  end
 -273 2432 a -273
2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432 a -326 2458 a Fd(0.1)-273 2432 y
tx@Dict begin RotEnd  end
 -273
2432 a -273 2432 a
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2432
a -273 2432 a
tx@Dict begin { 221.47691 246.51556 } PutCoor PutBegin  end
 -273 2432 a -273 2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432 a -326
2458 a Fd(0.2)-273 2432 y
tx@Dict begin RotEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin  PutEnd  end
 -273
2432 a -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2432 a -273 2432 a
tx@Dict begin { 221.47691 293.17831 } PutCoor PutBegin  end
 -273 2432
a -273 2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432 a -326 2458 a Fd(0.3)-273 2432
y
tx@Dict begin RotEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin  PutEnd  end
 -273 2432 a -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273
2432 a -273 2432 a
tx@Dict begin { 221.47691 339.84071 } PutCoor PutBegin  end
 -273 2432 a -273 2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432
a -326 2458 a Fd(0.4)-273 2432 y
tx@Dict begin RotEnd  end
 -273 2432 a -273 2432
a
tx@Dict begin  PutEnd  end
 -273 2432 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
232.85805 146.36131 232.85805 346.66946 462.30191 346.66946 462.30191
146.36131 232.85805 146.36131   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-273 2432 a
tx@Dict begin { 347.58015 109.71437 } PutCoor PutBegin  end
 -273 2432 a -304 2460 a Fc(Z)-273 2432 y
tx@Dict begin  PutEnd  end

-273 2432 a -273 2432 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2432 a -273 2432 a
tx@Dict begin { 201.67384 216.24168 } PutCoor PutBegin  end
 -273
2432 a -273 2432 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2432 a 20 x Fd(Densidad)28 b
Fc(f)9 b Fd(\()p Fc(z)t Fd(\))-273 2432 y
tx@Dict begin RotEnd  end
 -273 2432 a
-273 2432 a
tx@Dict begin  PutEnd  end
 -273 2432 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 146.36131 363.74118 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 141.58142 363.74118 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -273 2432 a
tx@Dict begin { 325.50072 179.13905 } PutCoor PutBegin  end
 -273
2432 a -587 2452 a Fc(F)j Fd(\()p Fc(z)t Fd(\))23 b(=)g
Fc(P)12 b Fd(\()p Fc(Z)28 b Fb(\024)23 b Fc(z)t Fd(\))-273
2432 y
tx@Dict begin  PutEnd  end
 -273 2432 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0.74  setgray  /ArrowA { moveto } def /ArrowB { } def
 [ 462.30191 153.41791 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0.74  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1277 1619 a
 currentpoint currentpoint translate 1 0.5 div 1 0.5 div scale neg
exch neg exch translate
 1277 1619 a 0 TeXcolorgray 0 TeXcolorgray
94 1714 3573 4 v 92 1813 4 100 v 200 1784 a Fa(z)p 346
1813 V 362 1813 V 202 w(0,00)p 693 1813 V 160 w(0,01)p
1023 1813 V 159 w(0,02)p 1353 1813 V 159 w(0,03)p 1683
1813 V 159 w(0,04)p 2014 1813 V 160 w(0,05)p 2344 1813
V 159 w(0,06)p 2674 1813 V 159 w(0,07)p 3004 1813 V 159
w(0,08)p 3335 1813 V 160 w(0,09)p 3665 1813 V 94 1817
3573 4 v 94 1833 V 92 1933 4 100 v 144 1903 a(-3,4)p
346 1933 V 362 1933 V 115 w Fd(0,0003)p 693 1933 V 97
w(0,0003)p 1023 1933 V 97 w(0,0003)p 1353 1933 V 98 w(0,0003)p
1683 1933 V 97 w(0,0003)p 2014 1933 V 97 w(0,0003)p 2344
1933 V 97 w(0,0003)p 2674 1933 V 98 w(0,0003)p 3004 1933
V 97 w(0,0003)p 3335 1933 V 97 w(0,0002)p 3665 1933 V
94 1936 3573 4 v 92 2036 4 100 v 144 2006 a Fa(-3,3)p
346 2036 V 362 2036 V 115 w Fd(0,0005)p 693 2036 V 97
w(0,0005)p 1023 2036 V 97 w(0,0005)p 1353 2036 V 98 w(0,0004)p
1683 2036 V 97 w(0,0004)p 2014 2036 V 97 w(0,0004)p 2344
2036 V 97 w(0,0004)p 2674 2036 V 98 w(0,0004)p 3004 2036
V 97 w(0,0004)p 3335 2036 V 97 w(0,0003)p 3665 2036 V
94 2039 3573 4 v 92 2139 4 100 v 144 2109 a Fa(-3,2)p
346 2139 V 362 2139 V 115 w Fd(0,0007)p 693 2139 V 97
w(0,0007)p 1023 2139 V 97 w(0,0006)p 1353 2139 V 98 w(0,0006)p
1683 2139 V 97 w(0,0006)p 2014 2139 V 97 w(0,0006)p 2344
2139 V 97 w(0,0006)p 2674 2139 V 98 w(0,0005)p 3004 2139
V 97 w(0,0005)p 3335 2139 V 97 w(0,0005)p 3665 2139 V
94 2142 3573 4 v 92 2242 4 100 v 144 2212 a Fa(-3,1)p
346 2242 V 362 2242 V 115 w Fd(0,0010)p 693 2242 V 97
w(0,0009)p 1023 2242 V 97 w(0,0009)p 1353 2242 V 98 w(0,0009)p
1683 2242 V 97 w(0,0008)p 2014 2242 V 97 w(0,0008)p 2344
2242 V 97 w(0,0008)p 2674 2242 V 98 w(0,0008)p 3004 2242
V 97 w(0,0007)p 3335 2242 V 97 w(0,0007)p 3665 2242 V
94 2245 3573 4 v 92 2345 4 100 v 144 2315 a Fa(-3,0)p
346 2345 V 362 2345 V 115 w Fd(0,0013)p 693 2345 V 97
w(0,0013)p 1023 2345 V 97 w(0,0013)p 1353 2345 V 98 w(0,0012)p
1683 2345 V 97 w(0,0012)p 2014 2345 V 97 w(0,0011)p 2344
2345 V 97 w(0,0011)p 2674 2345 V 98 w(0,0011)p 3004 2345
V 97 w(0,0010)p 3335 2345 V 97 w(0,0010)p 3665 2345 V
94 2348 3573 4 v 92 2448 4 100 v 144 2418 a Fa(-2,9)p
346 2448 V 362 2448 V 115 w Fd(0,0019)p 693 2448 V 97
w(0,0018)p 1023 2448 V 97 w(0,0018)p 1353 2448 V 98 w(0,0017)p
1683 2448 V 97 w(0,0016)p 2014 2448 V 97 w(0,0016)p 2344
2448 V 97 w(0,0015)p 2674 2448 V 98 w(0,0015)p 3004 2448
V 97 w(0,0014)p 3335 2448 V 97 w(0,0014)p 3665 2448 V
94 2451 3573 4 v 92 2551 4 100 v 144 2521 a Fa(-2,8)p
346 2551 V 362 2551 V 115 w Fd(0,0026)p 693 2551 V 97
w(0,0025)p 1023 2551 V 97 w(0,0024)p 1353 2551 V 98 w(0,0023)p
1683 2551 V 97 w(0,0023)p 2014 2551 V 97 w(0,0022)p 2344
2551 V 97 w(0,0021)p 2674 2551 V 98 w(0,0021)p 3004 2551
V 97 w(0,0020)p 3335 2551 V 97 w(0,0019)p 3665 2551 V
94 2554 3573 4 v 92 2654 4 100 v 144 2624 a Fa(-2,7)p
346 2654 V 362 2654 V 115 w Fd(0,0035)p 693 2654 V 97
w(0,0034)p 1023 2654 V 97 w(0,0033)p 1353 2654 V 98 w(0,0032)p
1683 2654 V 97 w(0,0031)p 2014 2654 V 97 w(0,0030)p 2344
2654 V 97 w(0,0029)p 2674 2654 V 98 w(0,0028)p 3004 2654
V 97 w(0,0027)p 3335 2654 V 97 w(0,0026)p 3665 2654 V
94 2657 3573 4 v 92 2757 4 100 v 144 2727 a Fa(-2,6)p
346 2757 V 362 2757 V 115 w Fd(0,0047)p 693 2757 V 97
w(0,0045)p 1023 2757 V 97 w(0,0044)p 1353 2757 V 98 w(0,0043)p
1683 2757 V 97 w(0,0041)p 2014 2757 V 97 w(0,0040)p 2344
2757 V 97 w(0,0039)p 2674 2757 V 98 w(0,0038)p 3004 2757
V 97 w(0,0037)p 3335 2757 V 97 w(0,0036)p 3665 2757 V
94 2760 3573 4 v 92 2859 4 100 v 144 2830 a Fa(-2,5)p
346 2859 V 362 2859 V 115 w Fd(0,0062)p 693 2859 V 97
w(0,0060)p 1023 2859 V 97 w(0,0059)p 1353 2859 V 98 w(0,0057)p
1683 2859 V 97 w(0,0055)p 2014 2859 V 97 w(0,0054)p 2344
2859 V 97 w(0,0052)p 2674 2859 V 98 w(0,0051)p 3004 2859
V 97 w(0,0049)p 3335 2859 V 97 w(0,0048)p 3665 2859 V
94 2863 3573 4 v 92 2962 4 100 v 144 2933 a Fa(-2,4)p
346 2962 V 362 2962 V 115 w Fd(0,0082)p 693 2962 V 97
w(0,0080)p 1023 2962 V 97 w(0,0078)p 1353 2962 V 98 w(0,0075)p
1683 2962 V 97 w(0,0073)p 2014 2962 V 97 w(0,0071)p 2344
2962 V 97 w(0,0069)p 2674 2962 V 98 w(0,0068)p 3004 2962
V 97 w(0,0066)p 3335 2962 V 97 w(0,0064)p 3665 2962 V
94 2966 3573 4 v 92 3065 4 100 v 144 3035 a Fa(-2,3)p
346 3065 V 362 3065 V 115 w Fd(0,0107)p 693 3065 V 97
w(0,0104)p 1023 3065 V 97 w(0,0102)p 1353 3065 V 98 w(0,0099)p
1683 3065 V 97 w(0,0096)p 2014 3065 V 97 w(0,0094)p 2344
3065 V 97 w(0,0091)p 2674 3065 V 98 w(0,0089)p 3004 3065
V 97 w(0,0087)p 3335 3065 V 97 w(0,0084)p 3665 3065 V
94 3069 3573 4 v 92 3168 4 100 v 144 3138 a Fa(-2,2)p
346 3168 V 362 3168 V 115 w Fd(0,0139)p 693 3168 V 97
w(0,0136)p 1023 3168 V 97 w(0,0132)p 1353 3168 V 98 w(0,0129)p
1683 3168 V 97 w(0,0125)p 2014 3168 V 97 w(0,0122)p 2344
3168 V 97 w(0,0119)p 2674 3168 V 98 w(0,0116)p 3004 3168
V 97 w(0,0113)p 3335 3168 V 97 w(0,0110)p 3665 3168 V
94 3172 3573 4 v 92 3271 4 100 v 144 3241 a Fa(-2,1)p
346 3271 V 362 3271 V 115 w Fd(0,0179)p 693 3271 V 97
w(0,0174)p 1023 3271 V 97 w(0,0170)p 1353 3271 V 98 w(0,0166)p
1683 3271 V 97 w(0,0162)p 2014 3271 V 97 w(0,0158)p 2344
3271 V 97 w(0,0154)p 2674 3271 V 98 w(0,0150)p 3004 3271
V 97 w(0,0146)p 3335 3271 V 97 w(0,0143)p 3665 3271 V
94 3275 3573 4 v 92 3374 4 100 v 144 3344 a Fa(-2,0)p
346 3374 V 362 3374 V 115 w Fd(0,0228)p 693 3374 V 97
w(0,0222)p 1023 3374 V 97 w(0,0217)p 1353 3374 V 98 w(0,0212)p
1683 3374 V 97 w(0,0207)p 2014 3374 V 97 w(0,0202)p 2344
3374 V 97 w(0,0197)p 2674 3374 V 98 w(0,0192)p 3004 3374
V 97 w(0,0188)p 3335 3374 V 97 w(0,0183)p 3665 3374 V
94 3378 3573 4 v 92 3477 4 100 v 144 3447 a Fa(-1,9)p
346 3477 V 362 3477 V 115 w Fd(0,0287)p 693 3477 V 97
w(0,0281)p 1023 3477 V 97 w(0,0274)p 1353 3477 V 98 w(0,0268)p
1683 3477 V 97 w(0,0262)p 2014 3477 V 97 w(0,0256)p 2344
3477 V 97 w(0,0250)p 2674 3477 V 98 w(0,0244)p 3004 3477
V 97 w(0,0239)p 3335 3477 V 97 w(0,0233)p 3665 3477 V
94 3480 3573 4 v 92 3580 4 100 v 144 3550 a Fa(-1,8)p
346 3580 V 362 3580 V 115 w Fd(0,0359)p 693 3580 V 97
w(0,0351)p 1023 3580 V 97 w(0,0344)p 1353 3580 V 98 w(0,0336)p
1683 3580 V 97 w(0,0329)p 2014 3580 V 97 w(0,0322)p 2344
3580 V 97 w(0,0314)p 2674 3580 V 98 w(0,0307)p 3004 3580
V 97 w(0,0301)p 3335 3580 V 97 w(0,0294)p 3665 3580 V
94 3583 3573 4 v 92 3683 4 100 v 144 3653 a Fa(-1,7)p
346 3683 V 362 3683 V 115 w Fd(0,0446)p 693 3683 V 97
w(0,0436)p 1023 3683 V 97 w(0,0427)p 1353 3683 V 98 w(0,0418)p
1683 3683 V 97 w(0,0409)p 2014 3683 V 97 w(0,0401)p 2344
3683 V 97 w(0,0392)p 2674 3683 V 98 w(0,0384)p 3004 3683
V 97 w(0,0375)p 3335 3683 V 97 w(0,0367)p 3665 3683 V
94 3686 3573 4 v 92 3786 4 100 v 144 3756 a Fa(-1,6)p
346 3786 V 362 3786 V 115 w Fd(0,0548)p 693 3786 V 97
w(0,0537)p 1023 3786 V 97 w(0,0526)p 1353 3786 V 98 w(0,0516)p
1683 3786 V 97 w(0,0505)p 2014 3786 V 97 w(0,0495)p 2344
3786 V 97 w(0,0485)p 2674 3786 V 98 w(0,0475)p 3004 3786
V 97 w(0,0465)p 3335 3786 V 97 w(0,0455)p 3665 3786 V
94 3789 3573 4 v 92 3889 4 100 v 144 3859 a Fa(-1,5)p
346 3889 V 362 3889 V 115 w Fd(0,0668)p 693 3889 V 97
w(0,0655)p 1023 3889 V 97 w(0,0643)p 1353 3889 V 98 w(0,0630)p
1683 3889 V 97 w(0,0618)p 2014 3889 V 97 w(0,0606)p 2344
3889 V 97 w(0,0594)p 2674 3889 V 98 w(0,0582)p 3004 3889
V 97 w(0,0571)p 3335 3889 V 97 w(0,0559)p 3665 3889 V
94 3892 3573 4 v 92 3992 4 100 v 144 3962 a Fa(-1,4)p
346 3992 V 362 3992 V 115 w Fd(0,0808)p 693 3992 V 97
w(0,0793)p 1023 3992 V 97 w(0,0778)p 1353 3992 V 98 w(0,0764)p
1683 3992 V 97 w(0,0749)p 2014 3992 V 97 w(0,0735)p 2344
3992 V 97 w(0,0721)p 2674 3992 V 98 w(0,0708)p 3004 3992
V 97 w(0,0694)p 3335 3992 V 97 w(0,0681)p 3665 3992 V
94 3995 3573 4 v 92 4095 4 100 v 144 4065 a Fa(-1,3)p
346 4095 V 362 4095 V 115 w Fd(0,0968)p 693 4095 V 97
w(0,0951)p 1023 4095 V 97 w(0,0934)p 1353 4095 V 98 w(0,0918)p
1683 4095 V 97 w(0,0901)p 2014 4095 V 97 w(0,0885)p 2344
4095 V 97 w(0,0869)p 2674 4095 V 98 w(0,0853)p 3004 4095
V 97 w(0,0838)p 3335 4095 V 97 w(0,0823)p 3665 4095 V
94 4098 3573 4 v 92 4198 4 100 v 144 4168 a Fa(-1,2)p
346 4198 V 362 4198 V 115 w Fd(0,1151)p 693 4198 V 97
w(0,1131)p 1023 4198 V 97 w(0,1112)p 1353 4198 V 98 w(0,1093)p
1683 4198 V 97 w(0,1075)p 2014 4198 V 97 w(0,1056)p 2344
4198 V 97 w(0,1038)p 2674 4198 V 98 w(0,1020)p 3004 4198
V 97 w(0,1003)p 3335 4198 V 97 w(0,0985)p 3665 4198 V
94 4201 3573 4 v 92 4301 4 100 v 144 4271 a Fa(-1,1)p
346 4301 V 362 4301 V 115 w Fd(0,1357)p 693 4301 V 97
w(0,1335)p 1023 4301 V 97 w(0,1314)p 1353 4301 V 98 w(0,1292)p
1683 4301 V 97 w(0,1271)p 2014 4301 V 97 w(0,1251)p 2344
4301 V 97 w(0,1230)p 2674 4301 V 98 w(0,1210)p 3004 4301
V 97 w(0,1190)p 3335 4301 V 97 w(0,1170)p 3665 4301 V
94 4304 3573 4 v 92 4404 4 100 v 144 4374 a Fa(-1,0)p
346 4404 V 362 4404 V 115 w Fd(0,1587)p 693 4404 V 97
w(0,1562)p 1023 4404 V 97 w(0,1539)p 1353 4404 V 98 w(0,1515)p
1683 4404 V 97 w(0,1492)p 2014 4404 V 97 w(0,1469)p 2344
4404 V 97 w(0,1446)p 2674 4404 V 98 w(0,1423)p 3004 4404
V 97 w(0,1401)p 3335 4404 V 97 w(0,1379)p 3665 4404 V
94 4407 3573 4 v 92 4507 4 100 v 144 4477 a Fa(-0,9)p
346 4507 V 362 4507 V 115 w Fd(0,1841)p 693 4507 V 97
w(0,1814)p 1023 4507 V 97 w(0,1788)p 1353 4507 V 98 w(0,1762)p
1683 4507 V 97 w(0,1736)p 2014 4507 V 97 w(0,1711)p 2344
4507 V 97 w(0,1685)p 2674 4507 V 98 w(0,1660)p 3004 4507
V 97 w(0,1635)p 3335 4507 V 97 w(0,1611)p 3665 4507 V
94 4510 3573 4 v 92 4610 4 100 v 144 4580 a Fa(-0,8)p
346 4610 V 362 4610 V 115 w Fd(0,2119)p 693 4610 V 97
w(0,2090)p 1023 4610 V 97 w(0,2061)p 1353 4610 V 98 w(0,2033)p
1683 4610 V 97 w(0,2005)p 2014 4610 V 97 w(0,1977)p 2344
4610 V 97 w(0,1949)p 2674 4610 V 98 w(0,1922)p 3004 4610
V 97 w(0,1894)p 3335 4610 V 97 w(0,1867)p 3665 4610 V
94 4613 3573 4 v 92 4713 4 100 v 144 4683 a Fa(-0,7)p
346 4713 V 362 4713 V 115 w Fd(0,2420)p 693 4713 V 97
w(0,2389)p 1023 4713 V 97 w(0,2358)p 1353 4713 V 98 w(0,2327)p
1683 4713 V 97 w(0,2296)p 2014 4713 V 97 w(0,2266)p 2344
4713 V 97 w(0,2236)p 2674 4713 V 98 w(0,2206)p 3004 4713
V 97 w(0,2177)p 3335 4713 V 97 w(0,2148)p 3665 4713 V
94 4716 3573 4 v 92 4815 4 100 v 144 4786 a Fa(-0,6)p
346 4815 V 362 4815 V 115 w Fd(0,2743)p 693 4815 V 97
w(0,2709)p 1023 4815 V 97 w(0,2676)p 1353 4815 V 98 w(0,2643)p
1683 4815 V 97 w(0,2611)p 2014 4815 V 97 w(0,2578)p 2344
4815 V 97 w(0,2546)p 2674 4815 V 98 w(0,2514)p 3004 4815
V 97 w(0,2483)p 3335 4815 V 97 w(0,2451)p 3665 4815 V
94 4819 3573 4 v 92 4918 4 100 v 144 4889 a Fa(-0,5)p
346 4918 V 362 4918 V 115 w Fd(0,3085)p 693 4918 V 97
w(0,3050)p 1023 4918 V 97 w(0,3015)p 1353 4918 V 98 w(0,2981)p
1683 4918 V 97 w(0,2946)p 2014 4918 V 97 w(0,2912)p 2344
4918 V 97 w(0,2877)p 2674 4918 V 98 w(0,2843)p 3004 4918
V 97 w(0,2810)p 3335 4918 V 97 w(0,2776)p 3665 4918 V
94 4922 3573 4 v 92 5021 4 100 v 144 4991 a Fa(-0,4)p
346 5021 V 362 5021 V 115 w Fd(0,3446)p 693 5021 V 97
w(0,3409)p 1023 5021 V 97 w(0,3372)p 1353 5021 V 98 w(0,3336)p
1683 5021 V 97 w(0,3300)p 2014 5021 V 97 w(0,3264)p 2344
5021 V 97 w(0,3228)p 2674 5021 V 98 w(0,3192)p 3004 5021
V 97 w(0,3156)p 3335 5021 V 97 w(0,3121)p 3665 5021 V
94 5025 3573 4 v 92 5124 4 100 v 144 5094 a Fa(-0,3)p
346 5124 V 362 5124 V 115 w Fd(0,3821)p 693 5124 V 97
w(0,3783)p 1023 5124 V 97 w(0,3745)p 1353 5124 V 98 w(0,3707)p
1683 5124 V 97 w(0,3669)p 2014 5124 V 97 w(0,3632)p 2344
5124 V 97 w(0,3594)p 2674 5124 V 98 w(0,3557)p 3004 5124
V 97 w(0,3520)p 3335 5124 V 97 w(0,3483)p 3665 5124 V
94 5128 3573 4 v 92 5227 4 100 v 144 5197 a Fa(-0,2)p
346 5227 V 362 5227 V 115 w Fd(0,4207)p 693 5227 V 97
w(0,4168)p 1023 5227 V 97 w(0,4129)p 1353 5227 V 98 w(0,4090)p
1683 5227 V 97 w(0,4052)p 2014 5227 V 97 w(0,4013)p 2344
5227 V 97 w(0,3974)p 2674 5227 V 98 w(0,3936)p 3004 5227
V 97 w(0,3897)p 3335 5227 V 97 w(0,3859)p 3665 5227 V
94 5231 3573 4 v 92 5330 4 100 v 144 5300 a Fa(-0,1)p
346 5330 V 362 5330 V 115 w Fd(0,4602)p 693 5330 V 97
w(0,4562)p 1023 5330 V 97 w(0,4522)p 1353 5330 V 98 w(0,4483)p
1683 5330 V 97 w(0,4443)p 2014 5330 V 97 w(0,4404)p 2344
5330 V 97 w(0,4364)p 2674 5330 V 98 w(0,4325)p 3004 5330
V 97 w(0,4286)p 3335 5330 V 97 w(0,4247)p 3665 5330 V
94 5334 3573 4 v 92 5433 4 100 v 144 5403 a Fa(-0,0)p
346 5433 V 362 5433 V 115 w Fd(0,5000)p 693 5433 V 97
w(0,4960)p 1023 5433 V 97 w(0,4920)p 1353 5433 V 98 w(0,4880)p
1683 5433 V 97 w(0,4840)p 2014 5433 V 97 w(0,4801)p 2344
5433 V 97 w(0,4761)p 2674 5433 V 98 w(0,4721)p 3004 5433
V 97 w(0,4681)p 3335 5433 V 97 w(0,4641)p 3665 5433 V
94 5436 3573 4 v 0 TeXcolorgray 1860 5956 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0.00 0.00 0.50
TeXcolorrgb 0 -129 a Fk(Universid)n(ad)31 b(San)g(P)-7
b(ablo)30 b(CEU)p 0 TeXcolorgray 0.00 0.00 0.50 TeXcolorrgb
733 w Fj(Depa)n(rtamento)c(de)i(Matem)o(\023)-41 b(atica)26
b(Aplicada)h(y)h(Estad)-11 b(\023)-31 b(\020stica)p 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
1277 1583 a
 currentpoint currentpoint translate 0.5 0.5 scale neg exch neg exch
translate
 1277 1583 a -273 2396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 153.6454 363.74118 315.9406 362.14801 319.81015 360.55447
323.67969 359.1888 327.09389 357.59561 330.0531 356.00209 332.78447
354.4089 335.06084 353.04288 336.654 351.4497 338.02003 349.85617 338.93037
348.4905 339.38573 346.89731 339.38573 345.30379 338.70288 343.71062
337.79219 342.34457 336.42651 340.7514 334.60548 339.15787 332.32947
337.79219 329.59776 336.19902 326.41106 334.60548 322.99684 333.01231
319.1273 331.64662 315.0299 330.0531 310.47752 328.45958 305.92514
327.09389 300.9174 325.50072 295.90968 323.90718 290.67445 322.31401
285.21138 320.94833 279.7483 319.3548 274.05772 317.76163 268.36716
316.39558 262.67659 314.80241 257.21387 313.2089 251.5233 311.6157
246.06023 310.25003 240.59749 308.6565 235.36192 307.06332 230.1267
305.6973 225.11896 304.10411 220.33873 302.51059 215.55884 300.9174
211.00645 299.55173 206.68156 297.95819 202.58417 296.36502 198.71463
294.99934 195.07292 293.4058 191.43088 291.81264 188.24417 290.44661
185.05746 288.85342 182.32576 287.2599 179.59439 285.66672 177.09053
284.30104 174.81416 282.7075 172.53815 281.11433 170.71712 279.7483
168.89609 278.15512 167.07507 276.5616 165.70938 274.96841 164.3437
273.60274 162.97803 272.0092 161.83984 270.41603 160.9295 269.05035
160.01881 267.45682 159.10847 265.8633 158.42564 264.27011 157.74245
262.90443 157.28746 261.31091 156.8321 259.71773 156.14928 258.35205
155.92177 256.75851 155.46643 255.16534 155.23894 253.57181 155.0111
252.20613 154.78358 250.61261 154.55574 249.01942 154.32825 247.65375
154.10075 246.06023 154.10075 244.46704 153.87291 242.87352 153.87291
241.50783 153.6454   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 1 0.5 0.31  setrgbcolor  1. .setopacityalpha  fill  grestore
gsave 0.72278 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
453.87997 153.87291 452.28645 153.87291 450.69327 153.87291 449.32759
154.10075 447.73407 154.32825 446.14088 154.32825 444.54736 154.55574
443.18167 154.78358 441.58815 155.0111 439.99496 155.23894 438.62929
155.46643 437.03577 155.92177 435.44258 156.37677 433.84906 156.8321
432.48338 157.28746 430.88985 157.97029 429.29668 158.65314 427.93098
159.33598 426.33746 160.2463 424.74428 161.157 423.15076 162.06734
421.78508 163.20552 420.1919 164.5712 418.59837 165.93689 417.23268
167.53041 415.63916 169.1236 414.04597 170.94461 412.6803 172.99348
411.08678 175.042 409.49359 177.54587 407.90007 180.04974 406.5344
182.7811 404.94086 185.74031 403.34769 188.92702 401.982 192.11372
400.38847 195.75577 398.79529 199.39748 397.20177 203.49486 395.83609
207.5919 394.2429 211.9168 392.64938 216.46918 391.28369 221.24942
389.69017 226.0293 388.097 231.26488 386.50346 236.2726 385.13779 241.73534
383.5446 247.19841 381.95108 252.66148 380.5854 258.35205 378.99187
264.04262 377.3987 269.50534 375.80516 275.1959 374.43948 280.65898
372.8463 286.34956 371.25278 291.5848 369.8871 296.82 368.29356 302.05559
366.7004 306.83548 365.10686 311.38786 363.74118 315.9406 362.14801
319.81015 360.55447 323.67969 359.1888 327.09389 357.59561 330.0531
356.00209 332.78447 354.4089 335.06084 353.04288 336.654 351.4497 338.02003
349.85617 338.93037 348.4905 339.38573 346.89731 339.38573 345.30379
338.70288 343.71062 337.79219 342.34457 336.42651 340.7514 334.60548
339.15787 332.32947 337.79219 329.59776 336.19902 326.41106 334.60548
322.99684 333.01231 319.1273 331.64662 315.0299 330.0531 310.47752
328.45958 305.92514 327.09389 300.9174 325.50072 295.90968 323.90718
290.67445 322.31401 285.21138 320.94833 279.7483 319.3548 274.05772
317.76163 268.36716 316.39558 262.67659 314.80241 257.21387 313.2089
251.5233 311.6157 246.06023 310.25003 240.59749 308.6565 235.36192
307.06332 230.1267 305.6973 225.11896 304.10411 220.33873 302.51059
215.55884 300.9174 211.00645 299.55173 206.68156 297.95819 202.58417
296.36502 198.71463 294.99934 195.07292 293.4058 191.43088 291.81264
188.24417 290.44661 185.05746 288.85342 182.32576 287.2599 179.59439
285.66672 177.09053 284.30104 174.81416 282.7075 172.53815 281.11433
170.71712 279.7483 168.89609 278.15512 167.07507 276.5616 165.70938
274.96841 164.3437 273.60274 162.97803 272.0092 161.83984 270.41603
160.9295 269.05035 160.01881 267.45682 159.10847 265.8633 158.42564
264.27011 157.74245 262.90443 157.28746 261.31091 156.8321 259.71773
156.14928 258.35205 155.92177 256.75851 155.46643 255.16534 155.23894
253.57181 155.0111 252.20613 154.78358 250.61261 154.55574 249.01942
154.32825 247.65375 154.10075 246.06023 154.10075 244.46704 153.87291
242.87352 153.87291 241.50783 153.6454   /Lineto /lineto load def 0
 setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
439.53963 146.36131 256.07568 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
256.07568 141.58142 256.07568 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
286.57706 141.58142 286.57706 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
317.30627 141.58142 317.30627 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
347.80765 141.58142 347.80765 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
378.30904 141.58142 378.30904 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
408.81076 141.58142 408.81076 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
439.53963 141.58142 439.53963 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-273 2396 a
tx@Dict begin { 256.07568 129.0621 } PutCoor PutBegin  end
 -273 2396 a -308 2423 a Fd(-3)-273 2396 y
tx@Dict begin  PutEnd  end

-273 2396 a -273 2396 a
tx@Dict begin { 286.57706 129.0621 } PutCoor PutBegin  end
 -273 2396 a -308 2423 a Fd(-2)-273
2396 y
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin { 317.30627 129.0621 } PutCoor PutBegin  end
 -273 2396 a -308 2423
a Fd(-1)-273 2396 y
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin { 347.80765 129.0621 } PutCoor PutBegin  end
 -273 2396
a -294 2423 a Fd(0)-273 2396 y
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396
a
tx@Dict begin { 378.30904 129.0621 } PutCoor PutBegin  end
 -273 2396 a -294 2423 a Fd(1)-273 2396 y
tx@Dict begin  PutEnd  end
 -273 2396
a -273 2396 a
tx@Dict begin { 408.81076 129.0621 } PutCoor PutBegin  end
 -273 2396 a -294 2423 a Fd(2)-273 2396
y
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin { 439.53963 129.0621 } PutCoor PutBegin  end
 -273 2396 a -294 2423 a Fd(3)-273
2396 y
tx@Dict begin  PutEnd  end
 -273 2396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
232.85805 339.84071 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 153.41791 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 199.85281 232.85805 199.85281   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 246.51556 232.85805 246.51556   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 293.17831 232.85805 293.17831   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
228.07817 339.84071 232.85805 339.84071   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2396 a -273
2396 a
tx@Dict begin { 221.47691 153.41791 } PutCoor PutBegin  end
 -273 2396 a -273 2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396 a -326 2423
a Fd(0.0)-273 2396 y
tx@Dict begin RotEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin  PutEnd  end
 -273 2396
a -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2396 a -273 2396 a
tx@Dict begin { 221.47691 199.85281 } PutCoor PutBegin  end
 -273 2396 a -273
2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396 a -326 2423 a Fd(0.1)-273 2396 y
tx@Dict begin RotEnd  end
 -273
2396 a -273 2396 a
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2396
a -273 2396 a
tx@Dict begin { 221.47691 246.51556 } PutCoor PutBegin  end
 -273 2396 a -273 2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396 a -326
2423 a Fd(0.2)-273 2396 y
tx@Dict begin RotEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin  PutEnd  end
 -273
2396 a -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2396 a -273 2396 a
tx@Dict begin { 221.47691 293.17831 } PutCoor PutBegin  end
 -273 2396
a -273 2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396 a -326 2423 a Fd(0.3)-273 2396
y
tx@Dict begin RotEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin  PutEnd  end
 -273 2396 a -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273
2396 a -273 2396 a
tx@Dict begin { 221.47691 339.84071 } PutCoor PutBegin  end
 -273 2396 a -273 2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396
a -326 2423 a Fd(0.4)-273 2396 y
tx@Dict begin RotEnd  end
 -273 2396 a -273 2396
a
tx@Dict begin  PutEnd  end
 -273 2396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
232.85805 146.36131 232.85805 346.66946 462.30191 346.66946 462.30191
146.36131 232.85805 146.36131   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-273 2396 a
tx@Dict begin { 347.58015 109.71437 } PutCoor PutBegin  end
 -273 2396 a -304 2424 a Fc(Z)-273 2396 y
tx@Dict begin  PutEnd  end

-273 2396 a -273 2396 a
tx@Dict begin  gsave STV CP T /ps@rot 90. def grestore  end
 -273 2396 a -273 2396 a
tx@Dict begin { 201.67384 216.24168 } PutCoor PutBegin  end
 -273
2396 a -273 2396 a
tx@Dict begin ps@rot  RotBegin  end
 -273 2396 a 21 x Fd(Densidad)28 b
Fc(f)9 b Fd(\()p Fc(z)t Fd(\))-273 2396 y
tx@Dict begin RotEnd  end
 -273 2396 a
-273 2396 a
tx@Dict begin  PutEnd  end
 -273 2396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 146.36131 363.74118 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
363.74118 141.58142 363.74118 146.36131   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -273 2396 a
tx@Dict begin { 325.50072 179.13905 } PutCoor PutBegin  end
 -273
2396 a -587 2417 a Fc(F)j Fd(\()p Fc(z)t Fd(\))23 b(=)g
Fc(P)12 b Fd(\()p Fc(Z)28 b Fb(\024)23 b Fc(z)t Fd(\))-273
2396 y
tx@Dict begin  PutEnd  end
 -273 2396 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.72278 SLW 0.74  setgray  /ArrowA { moveto } def /ArrowB { } def
 [ 462.30191 153.41791 232.85805 153.41791   /Lineto /lineto load def
0  setlinejoin false Line  gsave 0.72278 SLW 0.74  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1277 1583 a
 currentpoint currentpoint translate 1 0.5 div 1 0.5 div scale neg
exch neg exch translate
 1277 1583 a 110 1678 3541 4 v 108 1778 4
100 v 200 1748 a Fa(z)p 330 1778 V 347 1778 V 186 w(0,00)p
677 1778 V 160 w(0,01)p 1007 1778 V 159 w(0,02)p 1337
1778 V 159 w(0,03)p 1668 1778 V 159 w(0,04)p 1998 1778
V 160 w(0,05)p 2328 1778 V 159 w(0,06)p 2658 1778 V 159
w(0,07)p 2988 1778 V 159 w(0,08)p 3319 1778 V 160 w(0,09)p
3649 1778 V 110 1781 3541 4 v 110 1798 V 108 1897 4 100
v 160 1867 a(0,0)p 330 1897 V 347 1897 V 115 w Fd(0,5000)p
677 1897 V 97 w(0,5040)p 1007 1897 V 98 w(0,5080)p 1337
1897 V 97 w(0,5120)p 1668 1897 V 97 w(0,5160)p 1998 1897
V 97 w(0,5199)p 2328 1897 V 97 w(0,5239)p 2658 1897 V
98 w(0,5279)p 2988 1897 V 97 w(0,5319)p 3319 1897 V 97
w(0,5359)p 3649 1897 V 110 1901 3541 4 v 108 2000 4 100
v 160 1970 a Fa(0,1)p 330 2000 V 347 2000 V 115 w Fd(0,5398)p
677 2000 V 97 w(0,5438)p 1007 2000 V 98 w(0,5478)p 1337
2000 V 97 w(0,5517)p 1668 2000 V 97 w(0,5557)p 1998 2000
V 97 w(0,5596)p 2328 2000 V 97 w(0,5636)p 2658 2000 V
98 w(0,5675)p 2988 2000 V 97 w(0,5714)p 3319 2000 V 97
w(0,5753)p 3649 2000 V 110 2003 3541 4 v 108 2103 4 100
v 160 2073 a Fa(0,2)p 330 2103 V 347 2103 V 115 w Fd(0,5793)p
677 2103 V 97 w(0,5832)p 1007 2103 V 98 w(0,5871)p 1337
2103 V 97 w(0,5910)p 1668 2103 V 97 w(0,5948)p 1998 2103
V 97 w(0,5987)p 2328 2103 V 97 w(0,6026)p 2658 2103 V
98 w(0,6064)p 2988 2103 V 97 w(0,6103)p 3319 2103 V 97
w(0,6141)p 3649 2103 V 110 2106 3541 4 v 108 2206 4 100
v 160 2176 a Fa(0,3)p 330 2206 V 347 2206 V 115 w Fd(0,6179)p
677 2206 V 97 w(0,6217)p 1007 2206 V 98 w(0,6255)p 1337
2206 V 97 w(0,6293)p 1668 2206 V 97 w(0,6331)p 1998 2206
V 97 w(0,6368)p 2328 2206 V 97 w(0,6406)p 2658 2206 V
98 w(0,6443)p 2988 2206 V 97 w(0,6480)p 3319 2206 V 97
w(0,6517)p 3649 2206 V 110 2209 3541 4 v 108 2309 4 100
v 160 2279 a Fa(0,4)p 330 2309 V 347 2309 V 115 w Fd(0,6554)p
677 2309 V 97 w(0,6591)p 1007 2309 V 98 w(0,6628)p 1337
2309 V 97 w(0,6664)p 1668 2309 V 97 w(0,6700)p 1998 2309
V 97 w(0,6736)p 2328 2309 V 97 w(0,6772)p 2658 2309 V
98 w(0,6808)p 2988 2309 V 97 w(0,6844)p 3319 2309 V 97
w(0,6879)p 3649 2309 V 110 2312 3541 4 v 108 2412 4 100
v 160 2382 a Fa(0,5)p 330 2412 V 347 2412 V 115 w Fd(0,6915)p
677 2412 V 97 w(0,6950)p 1007 2412 V 98 w(0,6985)p 1337
2412 V 97 w(0,7019)p 1668 2412 V 97 w(0,7054)p 1998 2412
V 97 w(0,7088)p 2328 2412 V 97 w(0,7123)p 2658 2412 V
98 w(0,7157)p 2988 2412 V 97 w(0,7190)p 3319 2412 V 97
w(0,7224)p 3649 2412 V 110 2415 3541 4 v 108 2515 4 100
v 160 2485 a Fa(0,6)p 330 2515 V 347 2515 V 115 w Fd(0,7257)p
677 2515 V 97 w(0,7291)p 1007 2515 V 98 w(0,7324)p 1337
2515 V 97 w(0,7357)p 1668 2515 V 97 w(0,7389)p 1998 2515
V 97 w(0,7422)p 2328 2515 V 97 w(0,7454)p 2658 2515 V
98 w(0,7486)p 2988 2515 V 97 w(0,7517)p 3319 2515 V 97
w(0,7549)p 3649 2515 V 110 2518 3541 4 v 108 2618 4 100
v 160 2588 a Fa(0,7)p 330 2618 V 347 2618 V 115 w Fd(0,7580)p
677 2618 V 97 w(0,7611)p 1007 2618 V 98 w(0,7642)p 1337
2618 V 97 w(0,7673)p 1668 2618 V 97 w(0,7704)p 1998 2618
V 97 w(0,7734)p 2328 2618 V 97 w(0,7764)p 2658 2618 V
98 w(0,7794)p 2988 2618 V 97 w(0,7823)p 3319 2618 V 97
w(0,7852)p 3649 2618 V 110 2621 3541 4 v 108 2721 4 100
v 160 2691 a Fa(0,8)p 330 2721 V 347 2721 V 115 w Fd(0,7881)p
677 2721 V 97 w(0,7910)p 1007 2721 V 98 w(0,7939)p 1337
2721 V 97 w(0,7967)p 1668 2721 V 97 w(0,7995)p 1998 2721
V 97 w(0,8023)p 2328 2721 V 97 w(0,8051)p 2658 2721 V
98 w(0,8078)p 2988 2721 V 97 w(0,8106)p 3319 2721 V 97
w(0,8133)p 3649 2721 V 110 2724 3541 4 v 108 2824 4 100
v 160 2794 a Fa(0,9)p 330 2824 V 347 2824 V 115 w Fd(0,8159)p
677 2824 V 97 w(0,8186)p 1007 2824 V 98 w(0,8212)p 1337
2824 V 97 w(0,8238)p 1668 2824 V 97 w(0,8264)p 1998 2824
V 97 w(0,8289)p 2328 2824 V 97 w(0,8315)p 2658 2824 V
98 w(0,8340)p 2988 2824 V 97 w(0,8365)p 3319 2824 V 97
w(0,8389)p 3649 2824 V 110 2827 3541 4 v 108 2927 4 100
v 160 2897 a Fa(1,0)p 330 2927 V 347 2927 V 115 w Fd(0,8413)p
677 2927 V 97 w(0,8438)p 1007 2927 V 98 w(0,8461)p 1337
2927 V 97 w(0,8485)p 1668 2927 V 97 w(0,8508)p 1998 2927
V 97 w(0,8531)p 2328 2927 V 97 w(0,8554)p 2658 2927 V
98 w(0,8577)p 2988 2927 V 97 w(0,8599)p 3319 2927 V 97
w(0,8621)p 3649 2927 V 110 2930 3541 4 v 108 3030 4 100
v 160 3000 a Fa(1,1)p 330 3030 V 347 3030 V 115 w Fd(0,8643)p
677 3030 V 97 w(0,8665)p 1007 3030 V 98 w(0,8686)p 1337
3030 V 97 w(0,8708)p 1668 3030 V 97 w(0,8729)p 1998 3030
V 97 w(0,8749)p 2328 3030 V 97 w(0,8770)p 2658 3030 V
98 w(0,8790)p 2988 3030 V 97 w(0,8810)p 3319 3030 V 97
w(0,8830)p 3649 3030 V 110 3033 3541 4 v 108 3133 4 100
v 160 3103 a Fa(1,2)p 330 3133 V 347 3133 V 115 w Fd(0,8849)p
677 3133 V 97 w(0,8869)p 1007 3133 V 98 w(0,8888)p 1337
3133 V 97 w(0,8907)p 1668 3133 V 97 w(0,8925)p 1998 3133
V 97 w(0,8944)p 2328 3133 V 97 w(0,8962)p 2658 3133 V
98 w(0,8980)p 2988 3133 V 97 w(0,8997)p 3319 3133 V 97
w(0,9015)p 3649 3133 V 110 3136 3541 4 v 108 3236 4 100
v 160 3206 a Fa(1,3)p 330 3236 V 347 3236 V 115 w Fd(0,9032)p
677 3236 V 97 w(0,9049)p 1007 3236 V 98 w(0,9066)p 1337
3236 V 97 w(0,9082)p 1668 3236 V 97 w(0,9099)p 1998 3236
V 97 w(0,9115)p 2328 3236 V 97 w(0,9131)p 2658 3236 V
98 w(0,9147)p 2988 3236 V 97 w(0,9162)p 3319 3236 V 97
w(0,9177)p 3649 3236 V 110 3239 3541 4 v 108 3338 4 100
v 160 3309 a Fa(1,4)p 330 3338 V 347 3338 V 115 w Fd(0,9192)p
677 3338 V 97 w(0,9207)p 1007 3338 V 98 w(0,9222)p 1337
3338 V 97 w(0,9236)p 1668 3338 V 97 w(0,9251)p 1998 3338
V 97 w(0,9265)p 2328 3338 V 97 w(0,9279)p 2658 3338 V
98 w(0,9292)p 2988 3338 V 97 w(0,9306)p 3319 3338 V 97
w(0,9319)p 3649 3338 V 110 3342 3541 4 v 108 3441 4 100
v 160 3412 a Fa(1,5)p 330 3441 V 347 3441 V 115 w Fd(0,9332)p
677 3441 V 97 w(0,9345)p 1007 3441 V 98 w(0,9357)p 1337
3441 V 97 w(0,9370)p 1668 3441 V 97 w(0,9382)p 1998 3441
V 97 w(0,9394)p 2328 3441 V 97 w(0,9406)p 2658 3441 V
98 w(0,9418)p 2988 3441 V 97 w(0,9429)p 3319 3441 V 97
w(0,9441)p 3649 3441 V 110 3445 3541 4 v 108 3544 4 100
v 160 3514 a Fa(1,6)p 330 3544 V 347 3544 V 115 w Fd(0,9452)p
677 3544 V 97 w(0,9463)p 1007 3544 V 98 w(0,9474)p 1337
3544 V 97 w(0,9484)p 1668 3544 V 97 w(0,9495)p 1998 3544
V 97 w(0,9505)p 2328 3544 V 97 w(0,9515)p 2658 3544 V
98 w(0,9525)p 2988 3544 V 97 w(0,9535)p 3319 3544 V 97
w(0,9545)p 3649 3544 V 110 3548 3541 4 v 108 3647 4 100
v 160 3617 a Fa(1,7)p 330 3647 V 347 3647 V 115 w Fd(0,9554)p
677 3647 V 97 w(0,9564)p 1007 3647 V 98 w(0,9573)p 1337
3647 V 97 w(0,9582)p 1668 3647 V 97 w(0,9591)p 1998 3647
V 97 w(0,9599)p 2328 3647 V 97 w(0,9608)p 2658 3647 V
98 w(0,9616)p 2988 3647 V 97 w(0,9625)p 3319 3647 V 97
w(0,9633)p 3649 3647 V 110 3651 3541 4 v 108 3750 4 100
v 160 3720 a Fa(1,8)p 330 3750 V 347 3750 V 115 w Fd(0,9641)p
677 3750 V 97 w(0,9649)p 1007 3750 V 98 w(0,9656)p 1337
3750 V 97 w(0,9664)p 1668 3750 V 97 w(0,9671)p 1998 3750
V 97 w(0,9678)p 2328 3750 V 97 w(0,9686)p 2658 3750 V
98 w(0,9693)p 2988 3750 V 97 w(0,9699)p 3319 3750 V 97
w(0,9706)p 3649 3750 V 110 3754 3541 4 v 108 3853 4 100
v 160 3823 a Fa(1,9)p 330 3853 V 347 3853 V 115 w Fd(0,9713)p
677 3853 V 97 w(0,9719)p 1007 3853 V 98 w(0,9726)p 1337
3853 V 97 w(0,9732)p 1668 3853 V 97 w(0,9738)p 1998 3853
V 97 w(0,9744)p 2328 3853 V 97 w(0,9750)p 2658 3853 V
98 w(0,9756)p 2988 3853 V 97 w(0,9761)p 3319 3853 V 97
w(0,9767)p 3649 3853 V 110 3857 3541 4 v 108 3956 4 100
v 160 3926 a Fa(2,0)p 330 3956 V 347 3956 V 115 w Fd(0,9772)p
677 3956 V 97 w(0,9778)p 1007 3956 V 98 w(0,9783)p 1337
3956 V 97 w(0,9788)p 1668 3956 V 97 w(0,9793)p 1998 3956
V 97 w(0,9798)p 2328 3956 V 97 w(0,9803)p 2658 3956 V
98 w(0,9808)p 2988 3956 V 97 w(0,9812)p 3319 3956 V 97
w(0,9817)p 3649 3956 V 110 3959 3541 4 v 108 4059 4 100
v 160 4029 a Fa(2,1)p 330 4059 V 347 4059 V 115 w Fd(0,9821)p
677 4059 V 97 w(0,9826)p 1007 4059 V 98 w(0,9830)p 1337
4059 V 97 w(0,9834)p 1668 4059 V 97 w(0,9838)p 1998 4059
V 97 w(0,9842)p 2328 4059 V 97 w(0,9846)p 2658 4059 V
98 w(0,9850)p 2988 4059 V 97 w(0,9854)p 3319 4059 V 97
w(0,9857)p 3649 4059 V 110 4062 3541 4 v 108 4162 4 100
v 160 4132 a Fa(2,2)p 330 4162 V 347 4162 V 115 w Fd(0,9861)p
677 4162 V 97 w(0,9864)p 1007 4162 V 98 w(0,9868)p 1337
4162 V 97 w(0,9871)p 1668 4162 V 97 w(0,9875)p 1998 4162
V 97 w(0,9878)p 2328 4162 V 97 w(0,9881)p 2658 4162 V
98 w(0,9884)p 2988 4162 V 97 w(0,9887)p 3319 4162 V 97
w(0,9890)p 3649 4162 V 110 4165 3541 4 v 108 4265 4 100
v 160 4235 a Fa(2,3)p 330 4265 V 347 4265 V 115 w Fd(0,9893)p
677 4265 V 97 w(0,9896)p 1007 4265 V 98 w(0,9898)p 1337
4265 V 97 w(0,9901)p 1668 4265 V 97 w(0,9904)p 1998 4265
V 97 w(0,9906)p 2328 4265 V 97 w(0,9909)p 2658 4265 V
98 w(0,9911)p 2988 4265 V 97 w(0,9913)p 3319 4265 V 97
w(0,9916)p 3649 4265 V 110 4268 3541 4 v 108 4368 4 100
v 160 4338 a Fa(2,4)p 330 4368 V 347 4368 V 115 w Fd(0,9918)p
677 4368 V 97 w(0,9920)p 1007 4368 V 98 w(0,9922)p 1337
4368 V 97 w(0,9925)p 1668 4368 V 97 w(0,9927)p 1998 4368
V 97 w(0,9929)p 2328 4368 V 97 w(0,9931)p 2658 4368 V
98 w(0,9932)p 2988 4368 V 97 w(0,9934)p 3319 4368 V 97
w(0,9936)p 3649 4368 V 110 4371 3541 4 v 108 4471 4 100
v 160 4441 a Fa(2,5)p 330 4471 V 347 4471 V 115 w Fd(0,9938)p
677 4471 V 97 w(0,9940)p 1007 4471 V 98 w(0,9941)p 1337
4471 V 97 w(0,9943)p 1668 4471 V 97 w(0,9945)p 1998 4471
V 97 w(0,9946)p 2328 4471 V 97 w(0,9948)p 2658 4471 V
98 w(0,9949)p 2988 4471 V 97 w(0,9951)p 3319 4471 V 97
w(0,9952)p 3649 4471 V 110 4474 3541 4 v 108 4574 4 100
v 160 4544 a Fa(2,6)p 330 4574 V 347 4574 V 115 w Fd(0,9953)p
677 4574 V 97 w(0,9955)p 1007 4574 V 98 w(0,9956)p 1337
4574 V 97 w(0,9957)p 1668 4574 V 97 w(0,9959)p 1998 4574
V 97 w(0,9960)p 2328 4574 V 97 w(0,9961)p 2658 4574 V
98 w(0,9962)p 2988 4574 V 97 w(0,9963)p 3319 4574 V 97
w(0,9964)p 3649 4574 V 110 4577 3541 4 v 108 4677 4 100
v 160 4647 a Fa(2,7)p 330 4677 V 347 4677 V 115 w Fd(0,9965)p
677 4677 V 97 w(0,9966)p 1007 4677 V 98 w(0,9967)p 1337
4677 V 97 w(0,9968)p 1668 4677 V 97 w(0,9969)p 1998 4677
V 97 w(0,9970)p 2328 4677 V 97 w(0,9971)p 2658 4677 V
98 w(0,9972)p 2988 4677 V 97 w(0,9973)p 3319 4677 V 97
w(0,9974)p 3649 4677 V 110 4680 3541 4 v 108 4780 4 100
v 160 4750 a Fa(2,8)p 330 4780 V 347 4780 V 115 w Fd(0,9974)p
677 4780 V 97 w(0,9975)p 1007 4780 V 98 w(0,9976)p 1337
4780 V 97 w(0,9977)p 1668 4780 V 97 w(0,9977)p 1998 4780
V 97 w(0,9978)p 2328 4780 V 97 w(0,9979)p 2658 4780 V
98 w(0,9979)p 2988 4780 V 97 w(0,9980)p 3319 4780 V 97
w(0,9981)p 3649 4780 V 110 4783 3541 4 v 108 4883 4 100
v 160 4853 a Fa(2,9)p 330 4883 V 347 4883 V 115 w Fd(0,9981)p
677 4883 V 97 w(0,9982)p 1007 4883 V 98 w(0,9982)p 1337
4883 V 97 w(0,9983)p 1668 4883 V 97 w(0,9984)p 1998 4883
V 97 w(0,9984)p 2328 4883 V 97 w(0,9985)p 2658 4883 V
98 w(0,9985)p 2988 4883 V 97 w(0,9986)p 3319 4883 V 97
w(0,9986)p 3649 4883 V 110 4886 3541 4 v 108 4986 4 100
v 160 4956 a Fa(3,0)p 330 4986 V 347 4986 V 115 w Fd(0,9987)p
677 4986 V 97 w(0,9987)p 1007 4986 V 98 w(0,9987)p 1337
4986 V 97 w(0,9988)p 1668 4986 V 97 w(0,9988)p 1998 4986
V 97 w(0,9989)p 2328 4986 V 97 w(0,9989)p 2658 4986 V
98 w(0,9989)p 2988 4986 V 97 w(0,9990)p 3319 4986 V 97
w(0,9990)p 3649 4986 V 110 4989 3541 4 v 108 5089 4 100
v 160 5059 a Fa(3,1)p 330 5089 V 347 5089 V 115 w Fd(0,9990)p
677 5089 V 97 w(0,9991)p 1007 5089 V 98 w(0,9991)p 1337
5089 V 97 w(0,9991)p 1668 5089 V 97 w(0,9992)p 1998 5089
V 97 w(0,9992)p 2328 5089 V 97 w(0,9992)p 2658 5089 V
98 w(0,9992)p 2988 5089 V 97 w(0,9993)p 3319 5089 V 97
w(0,9993)p 3649 5089 V 110 5092 3541 4 v 108 5192 4 100
v 160 5162 a Fa(3,2)p 330 5192 V 347 5192 V 115 w Fd(0,9993)p
677 5192 V 97 w(0,9993)p 1007 5192 V 98 w(0,9994)p 1337
5192 V 97 w(0,9994)p 1668 5192 V 97 w(0,9994)p 1998 5192
V 97 w(0,9994)p 2328 5192 V 97 w(0,9994)p 2658 5192 V
98 w(0,9995)p 2988 5192 V 97 w(0,9995)p 3319 5192 V 97
w(0,9995)p 3649 5192 V 110 5195 3541 4 v 108 5294 4 100
v 160 5265 a Fa(3,3)p 330 5294 V 347 5294 V 115 w Fd(0,9995)p
677 5294 V 97 w(0,9995)p 1007 5294 V 98 w(0,9995)p 1337
5294 V 97 w(0,9996)p 1668 5294 V 97 w(0,9996)p 1998 5294
V 97 w(0,9996)p 2328 5294 V 97 w(0,9996)p 2658 5294 V
98 w(0,9996)p 2988 5294 V 97 w(0,9996)p 3319 5294 V 97
w(0,9997)p 3649 5294 V 110 5298 3541 4 v 108 5397 4 100
v 160 5368 a Fa(3,4)p 330 5397 V 347 5397 V 115 w Fd(0,9997)p
677 5397 V 97 w(0,9997)p 1007 5397 V 98 w(0,9997)p 1337
5397 V 97 w(0,9997)p 1668 5397 V 97 w(0,9997)p 1998 5397
V 97 w(0,9997)p 2328 5397 V 97 w(0,9997)p 2658 5397 V
98 w(0,9997)p 2988 5397 V 97 w(0,9997)p 3319 5397 V 97
w(0,9998)p 3649 5397 V 110 5401 3541 4 v 0 TeXcolorgray
1860 5956 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
